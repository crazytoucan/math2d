{
	"id": 0,
	"name": "math2d",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 6,
			"name": "IntervalMode",
			"kind": 4,
			"kindString": "Enumeration",
			"flags": {
				"isExported": true
			},
			"children": [
				{
					"id": 8,
					"name": "CLOSED",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "const.ts",
							"line": 35,
							"character": 8
						}
					],
					"defaultValue": "1"
				},
				{
					"id": 7,
					"name": "OPEN",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "const.ts",
							"line": 34,
							"character": 6
						}
					],
					"defaultValue": "0"
				},
				{
					"id": 9,
					"name": "OPEN_ABOVE",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "const.ts",
							"line": 36,
							"character": 12
						}
					],
					"defaultValue": "2"
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						8,
						7,
						9
					]
				}
			],
			"sources": [
				{
					"fileName": "const.ts",
					"line": 33,
					"character": 30
				}
			]
		},
		{
			"id": 1,
			"name": "Out",
			"kind": 4,
			"kindString": "Enumeration",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Sentinel values for the result of {@link boxGetOutCode}. The result of that\nfunction may be a bitwise union (`|`) of these enum members."
			},
			"children": [
				{
					"id": 4,
					"name": "MAX_X",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Sentinel value for the result of {@link boxGetOutCode} to represent that\nthe point was outside the min-Y edge of the box."
					},
					"sources": [
						{
							"fileName": "const.ts",
							"line": 24,
							"character": 7
						}
					],
					"defaultValue": " 1 << 2"
				},
				{
					"id": 5,
					"name": "MAX_Y",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Sentinel value for the result of {@link boxGetOutCode} to represent that\nthe point was outside the max-Y edge of the box."
					},
					"sources": [
						{
							"fileName": "const.ts",
							"line": 30,
							"character": 7
						}
					],
					"defaultValue": " 1 << 3"
				},
				{
					"id": 2,
					"name": "MIN_X",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Sentinel value for the result of {@link boxGetOutCode} to represent that\nthe point was outside the min-X edge of the box."
					},
					"sources": [
						{
							"fileName": "const.ts",
							"line": 12,
							"character": 7
						}
					],
					"defaultValue": " 1 << 0"
				},
				{
					"id": 3,
					"name": "MIN_Y",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Sentinel value for the result of {@link boxGetOutCode} to represent that\nthe point was outside the max-X edge of the box."
					},
					"sources": [
						{
							"fileName": "const.ts",
							"line": 18,
							"character": 7
						}
					],
					"defaultValue": " 1 << 1"
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						4,
						5,
						2,
						3
					]
				}
			],
			"sources": [
				{
					"fileName": "const.ts",
					"line": 7,
					"character": 21
				}
			]
		},
		{
			"id": 35,
			"name": "IBox",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Data type to represent an axis-aligned bounding box (AABB).",
				"text": "Bounding boxes are often used for approximations of geometric shapes or for certain\ncategories of performance-optimized spatial calculations, such as spatial index queries\nand viewbox culling.\n\nA box in Math2d is defined by its `minX`, `minY`, `maxX`, and `maxY` edges. Where\nrelevant and unless documented otherwise, boxes are interpreted as _closed_ regions,\ni.e. they include those points that lie along their edges.\n\n```\n┌╴x+\ny+     minY ─┌──────┐\n       maxY ─└──────┘\n             │      │\n           minX    maxX\n```\n\nMath2d chooses to lay out this data in a\nflat object structure, as opposed to an array or nested arrays, for ease of use and performance.\n",
				"tags": [
					{
						"tag": "see",
						"text": "{@link boxAlloc}"
					},
					{
						"tag": "see",
						"text": "{@link boxReset}\n"
					}
				]
			},
			"children": [
				{
					"id": 38,
					"name": "maxX",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Min-X boundary of this box, typically the \"right\" edge."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 233,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 39,
					"name": "maxY",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Max-Y boundary of this box. Note that this could be either the \"top\" or the \"bottom\" of the\nbox, depending on how your rendering and coordinate system are laid out."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 239,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 36,
					"name": "minX",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Min-X boundary of this box, typically the \"left\" edge."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 222,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 37,
					"name": "minY",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Min-Y boundary of this box. Note that this could be either the \"top\" or the \"bottom\" of the\nbox, depending on how your rendering and coordinate systems are laid out."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 228,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						38,
						39,
						36,
						37
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 218,
					"character": 21
				}
			]
		},
		{
			"id": 23,
			"name": "ILine",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Data type to represent a line in 2D space, i.e. some initial point in the plane plus a unit-length direction\nvector coming from that point.",
				"text": "The data representation of a line and the similar {@link IRay} type is actually the same, but Math2d chooses\nto export these two names for ease of clarity. Functions that may interpret Rays and Lines differently will be\nnamed differently to prevent ambiguity, such as\n{@link polygonIntersectLine} vs {@link polygonIntersectRay}.\n\nWhere relevant, a line is parameterized according to _t_ with movement of distance _t_ along its direction vector.\nIn this mapping, _t_ = 0 represents the initial point (x0, y0), _t_ > 0 moves in the direction of its vector,\nand _t_ < 0 in the opposite direction.\n",
				"tags": [
					{
						"tag": "see",
						"text": "{@link lineAlloc}"
					},
					{
						"tag": "see",
						"text": "{@link lineReset}\n"
					}
				]
			},
			"children": [
				{
					"id": 26,
					"name": "dirX",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "x-coordinate of the direction of the line, relative to its initial point"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 128,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 27,
					"name": "dirY",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "y-coordinate of the direction of the line, relative to its initial point"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 133,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 24,
					"name": "x0",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "x-coordinate of the line's initial point"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 118,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 25,
					"name": "y0",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "y-coordinate of the line's initial point"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 123,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						26,
						27,
						24,
						25
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 114,
					"character": 22
				}
			]
		},
		{
			"id": 28,
			"name": "IMat2d",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Data type to hold a 2D affine transformation matrix.",
				"text": "Two-dimensional vector graphics operations are usually represented using an affine transform matrix,\ni.e. a linear 2x2 matrix plus a 2D translation. Math2d chooses to lay out this data in a\nflat object structure, as opposed to an array or nested arrays, for ease of use and performance.\nThe field names used here match other standards, like the native DOMMatrix\nspecification and the Canvas reference APIs.\n\n```\n⎡a c e⎤\n⎣b d f⎦\n```\n\nPer usual linear algebra, multiplying a vector `v = (x, y)` according to this affine matrix is defined by:\n\n```\n⎡a c e⎤ ⎛x⎞   ⎛ax + cy + e⎞\n⎢b d f⎥ ⎜y⎟ = ⎜bx + dy + f⎟\n⎣0 0 1⎦ ⎝1⎠   ⎝     1     ⎠\n```\n",
				"tags": [
					{
						"tag": "see",
						"text": "{@link mat2dAlloc}"
					},
					{
						"tag": "see",
						"text": "{@link mat2dReset}\n"
					}
				]
			},
			"children": [
				{
					"id": 29,
					"name": "a",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Col 1, row 1 component, usually called `m11` in a 4x4 graphics matrix."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 165,
							"character": 3
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 30,
					"name": "b",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Col 1, row 2 component, usually called `m12` in a 4x4 graphics matrix."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 170,
							"character": 3
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 31,
					"name": "c",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Col 2, row 1 component, usually called `m21` in a 4x4 graphics matrix."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 175,
							"character": 3
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 32,
					"name": "d",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Col 2, row 2 component, usually called `m22` in a 4x4 graphics matrix."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 180,
							"character": 3
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 33,
					"name": "e",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Col 3, row 1 component, usually called `tx` or `m41` in a 4x4 graphics matrix."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 185,
							"character": 3
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 34,
					"name": "f",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Col 3, row 2 component, usually called `ty` or `m42` in a 4x4 graphics matrix."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 190,
							"character": 3
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						29,
						30,
						31,
						32,
						33,
						34
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 161,
					"character": 23
				}
			]
		},
		{
			"id": 46,
			"name": "INearestPointResult",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Data type to hold the result of find the nearest point on a piece of geometry."
			},
			"children": [
				{
					"id": 50,
					"name": "distanceValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The value of the distance from the computed nearest point to the original point.\nThis may be the actual (Euclidean) distance, the signed euclidean distance, or the distance squared,\ndepending on the actual nearest function called.",
						"text": "Consult the docs for the particular nearest function being called for specifics on what value\nis returned in this field.\n"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 367,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 49,
					"name": "t",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The parameterization of the nearest point along the geometry."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 357,
							"character": 3
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 47,
					"name": "x",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The x-coordinate of the nearest point."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 347,
							"character": 3
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 48,
					"name": "y",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The y-coordinate of the nearest point."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 352,
							"character": 3
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						50,
						49,
						47,
						48
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 343,
					"character": 36
				}
			]
		},
		{
			"id": 40,
			"name": "IPointIntersectionResult",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Data type to hold the result of a point intersection between two pieces of geometry.",
				"tags": [
					{
						"tag": "see",
						"text": "{@link lineIntersectLine}"
					},
					{
						"tag": "see",
						"text": "{@link lineIntersectPolyline}"
					},
					{
						"tag": "see",
						"text": "{@link lineIntersectRay}"
					},
					{
						"tag": "see",
						"text": "{@link lineIntersectSegment}"
					},
					{
						"tag": "see",
						"text": "{@link polygonIntersectLine}"
					},
					{
						"tag": "see",
						"text": "{@link polygonIntersectRay}"
					},
					{
						"tag": "see",
						"text": "{@link polygonIntersectSegment}"
					},
					{
						"tag": "see",
						"text": "{@link polylineIntersectLine}"
					},
					{
						"tag": "see",
						"text": "{@link polylineIntersectRay}"
					},
					{
						"tag": "see",
						"text": "{@link polylineIntersectSegment}"
					},
					{
						"tag": "see",
						"text": "{@link rayIntersectLine}"
					},
					{
						"tag": "see",
						"text": "{@link rayIntersectPolyline}"
					},
					{
						"tag": "see",
						"text": "{@link rayIntersectRay}"
					},
					{
						"tag": "see",
						"text": "{@link rayIntersectSegment}"
					},
					{
						"tag": "see",
						"text": "{@link segmentIntersectLine}"
					},
					{
						"tag": "see",
						"text": "{@link segmentIntersectPolyline}"
					},
					{
						"tag": "see",
						"text": "{@link segmentIntersectRay}"
					},
					{
						"tag": "see",
						"text": "{@link segmentIntersectSegment}\n"
					}
				]
			},
			"children": [
				{
					"id": 41,
					"name": "exists",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Whether an intersection was found. If the return value of a function is `false` for the `exists` field,\nthe other Intersection values will be set to `NaN` and should not be interpreted."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 315,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 44,
					"name": "t0",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The parameterization of the intersection along the first shape's geometry,\nif an intersection point was found."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 331,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 45,
					"name": "t1",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The parameterization of the intersection along the second shape's geometry,\nif an intersection point was found."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 337,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 42,
					"name": "x",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The x-coordinate of the intersection, if an intersection point was found."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 320,
							"character": 3
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 43,
					"name": "y",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The y-coordinate of the intersection, if an intersection point was found."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 325,
							"character": 3
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						41,
						44,
						45,
						42,
						43
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 310,
					"character": 41
				}
			]
		},
		{
			"id": 18,
			"name": "IRay",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Data type to represent a ray in 2D space, i.e. an initial point in the plane plus a unit-length direction\nvector coming from that point.",
				"text": "The data representation of a ray and the similar {@link ILine} type is actually the same, but Math2d chooses\nto export both names for clarity of usage. Functions that may interpret Rays and Lines differently will be\nnamed differently to prevent ambiguity,\nsuch as {@link polygonIntersectLine} vs {@link polygonIntersectRay}.\n\nWhere relevant, a ray is parameterized according to _t_ ≥ 0 with movement of distance _t_ along its direction vector.\nIn this mapping, _t_ = 0 represents the initial point (x0, y0).\n",
				"tags": [
					{
						"tag": "see",
						"text": "{@link rayAlloc}"
					},
					{
						"tag": "see",
						"text": "{@link rayReset}\n"
					}
				]
			},
			"children": [
				{
					"id": 21,
					"name": "dirX",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "x-coordinate of the direction vector of the ray.\nA ray's (dirX, dirY) direction vector is a unit vector emanating from its initial point."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 89,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 22,
					"name": "dirY",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "y-coordinate of the direction vector of the ray.\nA ray's (dirX, dirY) direction vector is a unit vector emanating from its initial point."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 95,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 19,
					"name": "x0",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "x-coordinate of the ray's initial point"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 78,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 20,
					"name": "y0",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "y-coordinate of the ray's initial point"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 83,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						21,
						22,
						19,
						20
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 74,
					"character": 21
				}
			]
		},
		{
			"id": 13,
			"name": "ISegment",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Data type to represent a 2D line segment.",
				"text": "A segment object holds two (x, y) endpoints, representing the line segment connecting those points\nin the plane. Unlike the similar {@link IRay} and {@link ILine} types, a segment has finite length.\n\nFor a series of connected line segments, see the {@link IPolyline} data type.\n\nWhere relevant, a segment is parameterized according to linear interpolation\nbetween its endpoints, where _t_ = 0 represents its starting vertex and _t_ = 1 its\nending vertex.\n",
				"tags": [
					{
						"tag": "see",
						"text": "{@link segmentAlloc}"
					},
					{
						"tag": "see",
						"text": "{@link segmentReset}\n"
					}
				]
			},
			"children": [
				{
					"id": 14,
					"name": "x0",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "x-coordinate of the starting vertex of the segment."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 41,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 16,
					"name": "x1",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "x-coordinate of the ending vertex of the segment."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 51,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 15,
					"name": "y0",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "y-coordinate of the starting vertex of the segment."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 46,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 17,
					"name": "y1",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "y-coordinate of the ending vertex of the segment."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 56,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						14,
						16,
						15,
						17
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 37,
					"character": 25
				}
			]
		},
		{
			"id": 10,
			"name": "IVec",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Data type to hold an (x, y) value.",
				"text": "The vector type in the Math2d package is used interchangeably to represent both points in the plane\nand vectors as in linear algebra.\n\nMath2d chooses to lay out the (x, y) values in a JavaScript object rather than an array\nfor ease of use. After carefully benchmarking that difference, it's been confirmed that this\ndoes not sacrifice performance or memory compactness.\n",
				"tags": [
					{
						"tag": "see",
						"text": "{@link vecAlloc}"
					},
					{
						"tag": "see",
						"text": "{@link vecReset}\n"
					}
				]
			},
			"children": [
				{
					"id": 11,
					"name": "x",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "x-coordinate of the vector"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 16,
							"character": 3
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 12,
					"name": "y",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "y-coordinate of the vector"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 19,
							"character": 3
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						11,
						12
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 14,
					"character": 21
				}
			]
		},
		{
			"id": 51,
			"name": "IPolygon",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "An alias for `number[]`. Data type to represent a polygon in the plane,\nas an interleaved sequence of vertex coordinates.",
				"text": "The `IPolygon` type is just an alias for an array of number values. For example,\na polygon with vertices v0, v1, v2, ..., vn is represented in Math2d as the array:\n\n```\n[v0x, v0y, v1x, v1y, v2x, v2y, ..., vnx, vny]\n```\n\nUnlike the similar {@link IPolyline} type, a polygon's perimeter is always interpreted as a closed shape.\n\nWhere relevant, a polygon with _N_ sides is parameterized according to _t_,\nwhere integer values of _t_ correspond to the polygon's\nvertices in order, and smooth values of _t_ therein interpolate linearly between adjacent vertices, with an\nadditional segment connecting the last vertex to the first.\n\nMath2d chooses to lay out this data in a flattened (interleaved) array, as opposed to e.g. an array of\nIVecs, for performance and more compact storage.\n"
			},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 263,
					"character": 20
				}
			],
			"type": {
				"type": "array",
				"elementType": {
					"type": "intrinsic",
					"name": "number"
				}
			}
		},
		{
			"id": 52,
			"name": "IPolyline",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "An alias for `number[]`. Data type to represent a sequence of connected line segments in the plane,\nas an interleaved array of vertex coordinates.",
				"text": "The `IPolyline` type is just an alias for an array of number values. For example,\na polyline connecting the points p0, p1, p2, ..., pn in space is represented in Math2d as the array:\n\n```\n[p0x, p0y, p1x, p1y, p2x, p2y, ..., pnx, pny]\n```\n\nUnlike the similar {@link IPolygon} type, a polyline is not necessary closed.\n\nWhere relevant, a polyline with _N_ points is parameterized according to _t_ with linear interpolation between\nadjacent points by index. For example, _t_ = 3.5 represents the midpoint between the index 3 and index 4 point\nof the polyline, _t_ = 0 is its first point, and _t_ = _N_ is its final point. Any _t_ value falling\noutside of the range [0, _N_] is disallowed.\n\nMath2d chooses to lay out this data in a flattened (interleaved) array, as opposed to e.g. an array of\nIVecs, for performance and more compact storage.\n"
			},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 286,
					"character": 21
				}
			],
			"type": {
				"type": "array",
				"elementType": {
					"type": "intrinsic",
					"name": "number"
				}
			}
		},
		{
			"id": 53,
			"name": "boxAlloc",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 54,
					"name": "boxAlloc",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a new Box object in memory, with all values initialized to `NaN`.",
						"text": "Data allocation functions like `boxAlloc()` are useful to hold results of\nMath2d function calls in inner loops of performance critical workflows.\n\nAs with any optimization, you don't need it until you've profiled your\napplication! Getting into temp variable management and shared state can\nseverely hurt code readability and maintainability, so it's best to avoid\nsuch optimization if you can.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n // initialize temp memory\n const TMP0 = boxAlloc();\n\n ... {\n   // Use this temp memory to hold result of `polygonGetBounds()`.\n   // This avoids a heap allocation.\n   const result = polygonGetBounds(existingObj.geometry, TMP0);\n }\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"name": "IBox",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxAlloc.ts",
					"line": 31,
					"character": 24
				}
			]
		},
		{
			"id": 62,
			"name": "boxClone",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 63,
					"name": "boxClone",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Copies values from an existing IBox into a new box.",
						"tags": [
							{
								"tag": "example",
								"text": "\n // make a copy of a given box\n const myBox = boxReset(-1, -1, 1, 1);\n const myBoxCopy = boxClone(myBox);\n\n // copy a given box into preallocated memory\n const TMP_BOX = boxAlloc();\n boxClone(myBox, TMP_BOX);\n"
							}
						]
					},
					"parameters": [
						{
							"id": 64,
							"name": "box",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "source to copy values from"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							}
						},
						{
							"id": 65,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "destination box to copy values to\n"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							},
							"defaultValue": " boxAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IBox",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxClone.ts",
					"line": 20,
					"character": 24
				}
			]
		},
		{
			"id": 76,
			"name": "boxContainsBox",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 77,
					"name": "boxContainsBox",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Determines whether the second box is completely enclosed in the first.",
						"text": "Returns true if the second box is contained in the first.\nEach box is treated as a closed area, so e.g. the two boxes may share\nan edge and the containment check would still pass.\n"
					},
					"parameters": [
						{
							"id": 78,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							}
						},
						{
							"id": 79,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxContainsBox.ts",
					"line": 13,
					"character": 30
				}
			]
		},
		{
			"id": 80,
			"name": "boxContainsPoint",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 81,
					"name": "boxContainsPoint",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Determines whether the box contains a given point.",
						"text": "Checks whether the point is inside the box's enclosed region.\nThe box is treated as a closed area,\nso points on the boundary of the box will return true.\n"
					},
					"parameters": [
						{
							"id": 82,
							"name": "box",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							}
						},
						{
							"id": 83,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 84,
							"name": "mode",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IntervalMode",
								"id": 6
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxContainsPoint.ts",
					"line": 14,
					"character": 32
				}
			]
		},
		{
			"id": 85,
			"name": "boxEncapsulate",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 86,
					"name": "boxEncapsulate",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Grows the box to include a given point.",
						"text": "Extends the box's bounding edges, if needed, to encapsulate the given point.\nIf the point is already inside the box, this function does nothing.\n"
					},
					"parameters": [
						{
							"id": 87,
							"name": "box",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the box to potentially grow"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							}
						},
						{
							"id": 88,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the point that the box should grow to include"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 89,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							},
							"defaultValue": " boxAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IBox",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxEncapsulate.ts",
					"line": 15,
					"character": 30
				}
			]
		},
		{
			"id": 90,
			"name": "boxEnclosingPoints",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 91,
					"name": "boxEnclosingPoints",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the smallest bounding box that contains all of the provided points.",
						"text": "If the provided array is empty, this method returns a box with `minX` and\n`minY` set to `Infinity` and `maxX` and `maxY` set to `-Infinity`.\n"
					},
					"parameters": [
						{
							"id": 92,
							"name": "points",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the points to contain"
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IVec",
									"id": 10
								}
							}
						},
						{
							"id": 93,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							},
							"defaultValue": " boxAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IBox",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxEnclosingPoints.ts",
					"line": 14,
					"character": 34
				}
			]
		},
		{
			"id": 94,
			"name": "boxGetOutCode",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 95,
					"name": "boxGetOutCode",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Determines where the specified point lies in relation to the given box.",
						"text": "The returned value is a binary OR of the possible values\n{@link Out.MIN_X}, {@link Out.MAX_X}, {@link Out.MIN_Y}, and {@link Out.MAX_Y}\nindicating, for each side, whether the point lies beyond that edge. If the point\nis inside the box, this function returns the value 0.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n const myBox = boxReset(-2, -2, 2, 2);\n const outCode1 = boxGetOutCode(myBox, vecReset(-4, 4)); // returns Out.MIN_X | Out.MAX_Y\n const outCode2 = boxGetOutCode(myBox, vec2Origin()); // returns 0"
							},
							{
								"tag": "see",
								"text": "Out.MIN_X"
							},
							{
								"tag": "see",
								"text": "Out.MAX_X"
							},
							{
								"tag": "see",
								"text": "Out.MIN_Y"
							},
							{
								"tag": "see",
								"text": "Out.MAX_Y\n"
							}
						]
					},
					"parameters": [
						{
							"id": 96,
							"name": "box",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							}
						},
						{
							"id": 97,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxGetOutCode.ts",
					"line": 24,
					"character": 29
				}
			]
		},
		{
			"id": 98,
			"name": "boxGrow",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 99,
					"name": "boxGrow",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Expands a box by a given amount in all directions.",
						"text": "Forms a new box with bounding edges `[(minX - amount) (minY - amount) (maxX + amount) (maxY + amount)]`.\n\nThe `amount` parameter is allowed to be negative, which effectively shrinks the box.\n"
					},
					"parameters": [
						{
							"id": 100,
							"name": "box",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the box to grow"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							}
						},
						{
							"id": 101,
							"name": "amount",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "amount to expand from each edge. Is allowed to be negative."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 102,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							},
							"defaultValue": " boxAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IBox",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxGrow.ts",
					"line": 16,
					"character": 23
				}
			]
		},
		{
			"id": 66,
			"name": "boxIntersection",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 67,
					"name": "boxIntersection",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the area intersection of the two box regions.",
						"text": "Given two boxes, this function computes the region where they overlap.\nIf the two boxes do not overlap,\nthe returned value will be an empty box, i.e. with `maxX < minX` or `maxY < minY`.\n\nThe similar function {@link boxIntersectsBox} will check whether two\nboxes intersect, without actually computing that intersection region.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link boxUnion}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 68,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "first box to compute intersection for"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							}
						},
						{
							"id": 69,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "second box to compute intersection for"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							}
						},
						{
							"id": 70,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							},
							"defaultValue": " boxAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IBox",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxIntersection.ts",
					"line": 20,
					"character": 31
				}
			]
		},
		{
			"id": 103,
			"name": "boxIntersectsBox",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 104,
					"name": "boxIntersectsBox",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Determines whether two boxes overlap.",
						"text": "This function checks whether the two boxes intersect, as areas. Both boxes are treated as closed\nregions, so e.g. this function will return true if the boxes share only a single edge.\n\nThe similar function {@link boxIntersection} can compute the overlap region.\n"
					},
					"parameters": [
						{
							"id": 105,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "first box to check for overlap"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							}
						},
						{
							"id": 106,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "second box to check for overlap"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							}
						},
						{
							"id": 107,
							"name": "mode",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "whether to include the boundaries of the boxes\n"
							},
							"type": {
								"type": "reference",
								"name": "IntervalMode",
								"id": 6
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxIntersectsBox.ts",
					"line": 16,
					"character": 32
				}
			]
		},
		{
			"id": 108,
			"name": "boxIsEmpty",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 109,
					"name": "boxIsEmpty",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Determines whether this box represents an empty area.",
						"text": "A box is considered empty if its `maxX` is less than or equal to its `minX` or\nits `maxY` is less than or equal to its `minY`.\n\nThis function handles `Infinity`, `-Infinity`, and `NaN` values:\n- Any box that contains a NaN edge is considered empty\n- Edges with non-finite values are compared according to normal mathematical rules, so e.g. the\n   [-∞, +∞]×[-∞, +∞] box is NOT empty, but the [+∞, -∞]×[-1, 1] box IS empty.\n"
					},
					"parameters": [
						{
							"id": 110,
							"name": "box",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxIsEmpty.ts",
					"line": 16,
					"character": 26
				}
			]
		},
		{
			"id": 55,
			"name": "boxReset",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 56,
					"name": "boxReset",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Construct a new box given `minX`, `minY`, `maxX`, and `maxY` bounding values.",
						"tags": [
							{
								"tag": "example",
								"text": "\n // initialize a new box that's [-1, 1]×[-1, 1]\n const myBox = boxReset(-1, -1, 1, 1);\n\n // reset an existing box's values to [4, 8]×[0, 8]\n const myBox2 = boxAlloc();\n boxReset(4, 0, 8, 8, myBox2);\n"
							}
						]
					},
					"parameters": [
						{
							"id": 57,
							"name": "minX",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n min-X boundary of the box, which is typically the _left_ edge"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 58,
							"name": "minY",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n min-Y boundary of the box, which could be the _top_ OR the _bottom_ edge of the box depending on how your\n rendering and coordinate systems are laid out."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 59,
							"name": "maxX",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n max-X boundary of the box, which is typically the _right_ edge"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 60,
							"name": "maxY",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n min-Y boundary of the box, which could be the _top_ OR the _bottom_ edge of the box depending on how your\n rendering and coordinate systems are laid out."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 61,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							},
							"defaultValue": " boxAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IBox",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxReset.ts",
					"line": 25,
					"character": 24
				}
			]
		},
		{
			"id": 111,
			"name": "boxScale",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 112,
					"name": "boxScale",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Scales a box by a fixed scalar in both directions."
					},
					"parameters": [
						{
							"id": 113,
							"name": "box",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the box to scale"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							}
						},
						{
							"id": 114,
							"name": "scalar",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the value by which to multiply all of the box's components"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 115,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							},
							"defaultValue": " boxAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IBox",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxScale.ts",
					"line": 12,
					"character": 24
				}
			]
		},
		{
			"id": 139,
			"name": "boxTransformBy",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 140,
					"name": "boxTransformBy",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Compute the bounds of the image of this box after applying a 2D affine transformation.",
						"text": "This function calculates the minimum bounds that will contain the image after applying a transformation\nto the given bounding box. Note that the actual geometric result of transforming a given\nbox may not be an axis-aligned box! For example, spinning the [-1, 1]×[-1, 1] box 45° clockwise yields a diamond\nconnecting the four points (√2, 0), (0, √2), (-√2, 0), (0, -√2). The bounding box of _that diamond_\nis [-√2, √2]×[-√2, √2].\n"
					},
					"parameters": [
						{
							"id": 141,
							"name": "box",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the box to transform"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							}
						},
						{
							"id": 142,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the affine transformation to apply to the box"
							},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							}
						},
						{
							"id": 143,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							},
							"defaultValue": " boxAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IBox",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxTransformBy.ts",
					"line": 20,
					"character": 30
				}
			]
		},
		{
			"id": 144,
			"name": "boxTranslate",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 145,
					"name": "boxTranslate",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Translate a box by an offset in the x- and y- directions."
					},
					"parameters": [
						{
							"id": 146,
							"name": "box",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the box to translate"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							}
						},
						{
							"id": 147,
							"name": "tx",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the amount to translate in the x direction"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 148,
							"name": "ty",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the amount to translate in the y direction"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 149,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							},
							"defaultValue": " boxAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IBox",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxTranslate.ts",
					"line": 13,
					"character": 28
				}
			]
		},
		{
			"id": 71,
			"name": "boxUnion",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 72,
					"name": "boxUnion",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Compute the smallest bounding box that contains both given boxes.",
						"text": "For example, if one box contains the other, this method returns the larger box.\nIf the two boxes don't intersect, this method returns a bounding region that covers both boxes.\n"
					},
					"parameters": [
						{
							"id": 73,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							}
						},
						{
							"id": 74,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							}
						},
						{
							"id": 75,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							},
							"defaultValue": " boxAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IBox",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxUnion.ts",
					"line": 15,
					"character": 24
				}
			]
		},
		{
			"id": 150,
			"name": "lineAlloc",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 151,
					"name": "lineAlloc",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a new Line object in memory, with all values initialized to `NaN`.",
						"text": "Data allocation functions like lineAlloc() are useful to hold results of\nMath2d function calls in inner loops of performance critical workflows.\n\nAs with any optimization, you don't need it until you've profiled your\napplication! Getting into temp variable management and shared state can\nseverely hurt code readability and maintainability, so it's best to avoid\nsuch optimization if you can.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n  // initialize temp memory\n const TMP0 = lineAlloc();\n\n ... {\n   // Use this temp memory to hold the result of `lineThroughPoints()`.\n   // This avoids a heap allocation.\n   const result = lineThroughPoints(existingObj.from, existingObj.to, TMP0);\n }\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"name": "ILine",
						"id": 23
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineAlloc.ts",
					"line": 31,
					"character": 25
				}
			]
		},
		{
			"id": 159,
			"name": "lineClone",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 160,
					"name": "lineClone",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Copies the values from the given line into a new line."
					},
					"parameters": [
						{
							"id": 161,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the source line from which values should be copied"
							},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 23
							}
						},
						{
							"id": 162,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 23
							},
							"defaultValue": " lineAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "ILine",
						"id": 23
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineClone.ts",
					"line": 11,
					"character": 25
				}
			]
		},
		{
			"id": 163,
			"name": "lineContainsPoint",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 164,
					"name": "lineContainsPoint",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Determines if the point is on the line",
						"text": "This function tests whether the point lies along the line's geometry,\nusing allowed error _ε_ = 1e-8.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link rayContainsPoint}"
							},
							{
								"tag": "see",
								"text": "{@link lineWhichSide}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 165,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the line to inspect"
							},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 23
							}
						},
						{
							"id": 166,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the point to check whether it's on the line"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineContainsPoint.ts",
					"line": 16,
					"character": 33
				}
			]
		},
		{
			"id": 167,
			"name": "lineGetPointAt",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 168,
					"name": "lineGetPointAt",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Gets a point along the line, parameterized according to distance along its\ndirection vector.",
						"text": "Retrieves a point on the line's geometry according to moving distance _t_\nalong the direction vector from its initial point.\n\nSynonymous to {@link rayGetPointAt}.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link ILine}"
							},
							{
								"tag": "see",
								"text": "{@link lineGetPointAt}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 169,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the line to inspect"
							},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 23
							}
						},
						{
							"id": 170,
							"name": "t",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "distance along the line at which to compute point"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 171,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 10
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineGetPointAt.ts",
					"line": 20,
					"character": 30
				}
			]
		},
		{
			"id": 193,
			"name": "lineIntersectLine",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 194,
					"name": "lineIntersectLine",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the intersection point between the two given lines, if it exists.",
						"text": "Finds the location at which the first and second line meet. If the lines are parallel and not overlapping,\nthis function returns no intersection. If the lines are completely overlapping,\nthis function returns the first line's initial point.\n\nThe returned value is an {@link IPointIntersectionResult} object which will have have the\n`exists` flag set to `true` iff an intersection was found. It additionally\nhas the following fields, if the intersection exists:\n\n- `x` – the x-coordinate of the point of intersection\n- `y` – the y-coordinate of the point of intersection\n- `t0` – where along the first line's geometry the intersection was found,\n     according to the first line's parameterization\n- `t1` – where along the second line's geometry the intersection was found,\n     according to the second line's parameterization\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link lineIntersectPolyline}"
							},
							{
								"tag": "see",
								"text": "{@link lineIntersectRay}"
							},
							{
								"tag": "see",
								"text": "{@link lineIntersectSegment}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 195,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the first line to intersect"
							},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 23
							}
						},
						{
							"id": 196,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the second line to find intersection with"
							},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 23
							}
						},
						{
							"id": 197,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPointIntersectionResult",
								"id": 40
							},
							"defaultValue": " pointIntersectionResultAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IPointIntersectionResult",
						"id": 40
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineIntersectLine.ts",
					"line": 36,
					"character": 33
				}
			]
		},
		{
			"id": 228,
			"name": "lineIntersectPolyline",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 229,
					"name": "lineIntersectPolyline",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes all locations at which a line crosses a given polyline.",
						"text": "For each returned intersection, the intersection's _t0_ describes where the point fell on the line's geometry\naccording to {@link ILine} parameterization. (See {@link lineGetPointAt}.)\n\nThe returned points will be sorted by _t0_ increasing, i.e. they will be sorted according to the\norder in which one would hit the intersections if one were to start from -∞ and travel toward +∞ along the line's\ndirection vector.\n\nAlmost equivalent to {@link polylineIntersectLine}, except the _t0_ and _t1_ values are reversed\nand the returned intersections are sorted according to the line's geometry.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IPointIntersectionResult}"
							},
							{
								"tag": "see",
								"text": "{@link ILine}"
							},
							{
								"tag": "see",
								"text": "{@link polylineIntersectLine}"
							},
							{
								"tag": "see",
								"text": "{@link lineIntersectLine}"
							},
							{
								"tag": "see",
								"text": "{@link lineIntersectRay}"
							},
							{
								"tag": "see",
								"text": "{@link lineIntersectSegment}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 230,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 23
							}
						},
						{
							"id": 231,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 52
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "IPointIntersectionResult",
							"id": 40
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineIntersectPolyline.ts",
					"line": 28,
					"character": 37
				}
			]
		},
		{
			"id": 232,
			"name": "lineIntersectRay",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 233,
					"name": "lineIntersectRay",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the intersection point between the given line and ray, if it exists.",
						"text": "Finds the location at which the line and ray meet. If the ray starts on one side of the line and points away from it,\nor they are parallel, this function returns no intersection.\nIf the ray and line are the same (i.e. they are parallel and coincide with one another),\nthis function returns the line's initial point.\n\nThe returned value is an {@link IPointIntersectionResult} object which will have have the\n`exists` flag set to `true` iff an intersection was found. It additionally\nhas the following fields, if the intersection exists:\n\n- `x` – the x-coordinate of the point of intersection\n- `y` – the y-coordinate of the point of intersection\n- `t0` – where along the line's geometry the intersection was found,\n     according to the line's parameterization\n- `t1` – where along the ray's geometry the intersection was found,\n     according to the ray's parameterization\n\nAlmost equivalent to {@link rayIntersectLine}, except the returned intersection reverses its _t0_ and _t1_.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link lineIntersectLine}"
							},
							{
								"tag": "see",
								"text": "{@link lineIntersectPolyline}"
							},
							{
								"tag": "see",
								"text": "{@link lineIntersectSegment}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 234,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the line to intersect"
							},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 23
							}
						},
						{
							"id": 235,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the ray to find intersection with"
							},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 18
							}
						},
						{
							"id": 236,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPointIntersectionResult",
								"id": 40
							},
							"defaultValue": " pointIntersectionResultAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IPointIntersectionResult",
						"id": 40
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineIntersectRay.ts",
					"line": 34,
					"character": 32
				}
			]
		},
		{
			"id": 218,
			"name": "lineIntersectSegment",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 219,
					"name": "lineIntersectSegment",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the intersection point between the given line and segment, if it exists.",
						"text": "Finds the location at which the line and line segment meet.\nIf the line \"misses\" the segment, this function returns no intersection.\nIf the line completely overlaps the segment, this function returns the line's initial point.\n\nThe returned value is an {@link IPointIntersectionResult} object which will have have the\n`exists` flag set to `true` iff an intersection was found. It additionally\nhas the following fields, if the intersection exists:\n\n- `x` – the x-coordinate of the point of intersection\n- `y` – the y-coordinate of the point of intersection\n- `t0` – where along the line's geometry the intersection was found,\n     according to the line's parameterization\n- `t1` – where along the segment's geometry the intersection was found,\n     according to the segment's parameterization\n\nAlmost equivalent to {@link segmentIntersectLine}, except the returned intersection reverses its _t0_ and _t1_.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link lineIntersectLine}"
							},
							{
								"tag": "see",
								"text": "{@link lineIntersectPolyline}"
							},
							{
								"tag": "see",
								"text": "{@link lineIntersectRay}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 220,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the line to intersect"
							},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 23
							}
						},
						{
							"id": 221,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the segment to find intersection with"
							},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 13
							}
						},
						{
							"id": 222,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPointIntersectionResult",
								"id": 40
							},
							"defaultValue": " pointIntersectionResultAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IPointIntersectionResult",
						"id": 40
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineIntersectSegment.ts",
					"line": 35,
					"character": 36
				}
			]
		},
		{
			"id": 251,
			"name": "lineNearestDistanceToPoint",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 252,
					"name": "lineNearestDistanceToPoint",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Determines the closest the line comes to a given point",
						"text": "This measures the perpendicular distance of the point to the line's\ndirection vector. If the point lies on the line, this function returns 0.\n\nTo get the signed distance of the point to the line, which additionally\nencodes which half-plane the point lies within, see\n{@link lineNearestSignedDistanceToPoint}.\n",
						"tags": [
							{
								"tag": "see",
								"text": "INearestPointResult\n"
							}
						]
					},
					"parameters": [
						{
							"id": 253,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the line to inspect"
							},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 23
							}
						},
						{
							"id": 254,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the reference point to check for closest distance"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 255,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "INearestPointResult",
								"id": 46
							},
							"defaultValue": " nearestPointResultAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "INearestPointResult",
						"id": 46
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineNearestDistanceToPoint.ts",
					"line": 19,
					"character": 42
				}
			]
		},
		{
			"id": 246,
			"name": "lineNearestSignedDistanceToPoint",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 247,
					"name": "lineNearestSignedDistanceToPoint",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Determines the closest _signed_ distance the line comes to a given point",
						"text": "This measures the perpendicular distance of the point to the line's\ndirection vector. A _positive_ return value means that the point lies on the side of the line\nrotated from its direction vector in the x+ to y+ direction (\"left\" or counter-clockwise in the\nstandard Cartesian coordinate system), while a _negative_ return value means it lies in the other half-plane\n(\"right\" or clockwise in the standard Cartesian coordinate system).\n\nIf the point lies on the line, this function returns 0.\n\nTo get the (unsigned) distance of the point to the line, see\n{@link lineNearestSignedDistanceToPoint}.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link lineGetClosestDistanceToPoint}"
							},
							{
								"tag": "see",
								"text": "{@link lineWhichSide}"
							},
							{
								"tag": "see",
								"text": "{@link INearestPointResult}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 248,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the line to inspect"
							},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 23
							}
						},
						{
							"id": 249,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the reference point to check for closest distance"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 250,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "INearestPointResult",
								"id": 46
							},
							"defaultValue": " nearestPointResultAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "INearestPointResult",
						"id": 46
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineNearestSignedDistanceToPoint.ts",
					"line": 27,
					"character": 48
				}
			]
		},
		{
			"id": 256,
			"name": "lineProjectPoint",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 257,
					"name": "lineProjectPoint",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Projects a point onto the given line, returning the distance _t_ along the line where it falls.",
						"text": "This function basically computes the dot product of the relative vector from the line's initial\npoint to the given point.\n\nTo find the closest point at which the line comes to the given point, which is the image\nof the point projected onto the line, see {@link lineGetClosestPoint}.\n"
					},
					"parameters": [
						{
							"id": 258,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "line to inspect"
							},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 23
							}
						},
						{
							"id": 259,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "point to project onto the line"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 260,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 10
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineProjectPoint.ts",
					"line": 19,
					"character": 32
				}
			]
		},
		{
			"id": 152,
			"name": "lineReset",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 153,
					"name": "lineReset",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Construct a new line given an (x0, y0) initial point and (dirX, dirY) direction vector.",
						"text": "This function creates a new line from given values. The (dirX, dirY) values given should\ndescribe a unit vector: no checks or operations are done internally to guarantee that is so.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link ILine}"
							},
							{
								"tag": "see",
								"text": "{@link lineAlloc}"
							},
							{
								"tag": "see",
								"text": "{@link lineClone}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 154,
							"name": "x0",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "x-coordinate of the line's initial point"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 155,
							"name": "y0",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "y-coordinate of the line's initial point"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 156,
							"name": "dirX",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "x-coordinate of the line's direction vector, which should form a unit vector\n along with the provided `dirY`"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 157,
							"name": "dirY",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "y-coordinate of the line's direction vector, which should form a unit vector\n along with the provided `dirX`"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 158,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 23
							},
							"defaultValue": " lineAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "ILine",
						"id": 23
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineReset.ts",
					"line": 20,
					"character": 25
				}
			]
		},
		{
			"id": 261,
			"name": "lineThroughPoints",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 262,
					"name": "lineThroughPoints",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Construct a line that passes through two given points.",
						"text": "The constructed line will have its initial point set to the given `from` point,\nand its direction initialized to pass through the `to` point (on the positive side\nof the line, i.e. _t_ > 0). The direction vector will be properly normalized even if\nthe `from` and `to` points are not one unit apart.\n\nIf the two points are the same, the returned line will have the same initial point as\nthe `from` argument and a (NaN, NaN) direction vector.\n"
					},
					"parameters": [
						{
							"id": 263,
							"name": "from",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the first point to pass through"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 264,
							"name": "to",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the second point to pass through"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 265,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 23
							},
							"defaultValue": " lineAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "ILine",
						"id": 23
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineThroughPoints.ts",
					"line": 20,
					"character": 33
				}
			]
		},
		{
			"id": 266,
			"name": "lineTransformBy",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 267,
					"name": "lineTransformBy",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Transforms a line by an affine matrix.",
						"text": "This function computes the result of applying a transform to the line's geometry.\nThe resulting initial point will be the result of applying the given transform to the original\ninitial point, and its direction will be the result of applying any rotations or shears from\nthe matrix. The resulting direction vector will be correctly normalized when applicable.\n\nAffine transformations and their specifics within Math2d are described in more detail\nin the {@link vecTransformBy} docs.\n\nSynonymous to {@link rayTransformBy}.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link vecTransformBy}"
							},
							{
								"tag": "see",
								"text": "{@link Imat2d}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 268,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the line to transform"
							},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 23
							}
						},
						{
							"id": 269,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the affine transform to apply"
							},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							}
						},
						{
							"id": 270,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 23
							},
							"defaultValue": " lineAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "ILine",
						"id": 23
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineTransformBy.ts",
					"line": 26,
					"character": 31
				}
			]
		},
		{
			"id": 271,
			"name": "lineWhichSide",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 272,
					"name": "lineWhichSide",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes on which side of the line a given point lies.",
						"text": "This method returns one of four possible values:\n\n- `0`, if the point lies exactly along the line\n- `1`, if the point lies in the halfplane defined by its direction vector sweeping in the x+ to y+ direction\n  (\"left\" side, or counter-clockwise in the standard Cartesian coordinate system)\n- `-1`, if the point lies in the halfplane defined by its direction vector sweeping in the x+ to y- direction\n  (\"right\" side, or clockwise in the standard Cartesian coordinate system)\n- `NaN`, if either of the point's coordinates or any of the line's components are NaN.\n\nThis measures the perpendicular distance of the point to the line's\ndirection vector. A _positive_ return value means that the point lies on the side of the line\nrotated from its direction vector in the x+ to y+ direction (\"left\" or counter-clockwise in the\nstandard Cartesian coordinate system), while a _negative_ return value means it lies in the other half-plane\n(\"right\" or clockwise in the standard Cartesian coordinate system).\n\nIf the point lies on the line, this function returns 0.\n\nTo get the (unsigned) distance of the point to the line, see\n{@link lineClosestDistanceToPoint}.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link lineGetClosestDistanceToPoint}"
							},
							{
								"tag": "see",
								"text": "{@link lineWhichSide}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 273,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the line to inspect"
							},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 23
							}
						},
						{
							"id": 274,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the reference point to check for closest distance"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineWhichSide.ts",
					"line": 33,
					"character": 29
				}
			]
		},
		{
			"id": 172,
			"name": "mat2dAlloc",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 173,
					"name": "mat2dAlloc",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a new mat2d object in memory, with all values initialized to `NaN`.",
						"text": "Data allocation functions like `mat2dAlloc()` are useful to hold results of\nMath2d function calls in inner loops of performance critical workflows.\n\nAs with any optimization, you don't need it until you've profiled your\napplication! Getting into temp variable management and shared state can\nseverely hurt code readability and maintainability, so it's best to avoid\nsuch optimization if you can.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n // initialize temp memory\n const TMP0 = mat2dAlloc();\n\n ... {\n   // Use this temp memory to hold result of `mat2dInvert()`.\n   // This avoids a heap allocation.\n   const result = mat2dInvert(existingObj.transform, TMP0);\n }\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"name": "IMat2d",
						"id": 28
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2dFunctions/mat2dAlloc.ts",
					"line": 33,
					"character": 26
				}
			]
		},
		{
			"id": 275,
			"name": "mat2dClone",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 276,
					"name": "mat2dClone",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Copies the values from the given matrix into a new matrix."
					},
					"parameters": [
						{
							"id": 277,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the matrix to copy"
							},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							}
						},
						{
							"id": 278,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							},
							"defaultValue": " mat2dAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IMat2d",
						"id": 28
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2dFunctions/mat2dClone.ts",
					"line": 11,
					"character": 26
				}
			]
		},
		{
			"id": 279,
			"name": "mat2dDeterminant",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 280,
					"name": "mat2dDeterminant",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the determinant of the affine matrix",
						"text": "The determinant in 2D space is given by `a * d - b * c`.\n"
					},
					"parameters": [
						{
							"id": 281,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "matrix to take determinant of\n"
							},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2dFunctions/mat2dDeterminant.ts",
					"line": 10,
					"character": 32
				}
			]
		},
		{
			"id": 282,
			"name": "mat2dFromRotation",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 283,
					"name": "mat2dFromRotation",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the affine transform corresponding to a given rotation, in radians",
						"text": "Calculates the matrix that would yield a rotation of `theta` radians around the origin.\nThe rotation is from the `x+` to `y+` direction, which is _counter-clockwise_ in the\nstandard Cartesian coordinate system or _clockwise_ in most standard graphics\ncoordinate systems, as in Canvas and the DOM.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link mat2dFromTranslation}"
							},
							{
								"tag": "see",
								"text": "{@link mat2dRotate}"
							},
							{
								"tag": "see",
								"text": "{@link mat2dReset}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 284,
							"name": "theta",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "angle in radians to create rotation for"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 285,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							},
							"defaultValue": " mat2dAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IMat2d",
						"id": 28
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2dFunctions/mat2dFromRotation.ts",
					"line": 18,
					"character": 33
				}
			]
		},
		{
			"id": 286,
			"name": "mat2dFromTranslation",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 287,
					"name": "mat2dFromTranslation",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the affine transform corresponding to a given (tx, ty) translation",
						"tags": [
							{
								"tag": "see",
								"text": "{@link mat2dFromRotation}"
							},
							{
								"tag": "see",
								"text": "{@link mat2dTranslate}"
							},
							{
								"tag": "see",
								"text": "{@link mat2dReset}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 288,
							"name": "tx",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the x translation component"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 289,
							"name": "ty",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the y translation component"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 290,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							},
							"defaultValue": " mat2dAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IMat2d",
						"id": 28
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2dFunctions/mat2dFromTranslation.ts",
					"line": 13,
					"character": 36
				}
			]
		},
		{
			"id": 291,
			"name": "mat2dIdentity",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 292,
					"name": "mat2dIdentity",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the identity affine matrix, `[1 0 0 1 0 0]`"
					},
					"parameters": [
						{
							"id": 293,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							},
							"defaultValue": " mat2dAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IMat2d",
						"id": 28
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2dFunctions/mat2dIdentity.ts",
					"line": 9,
					"character": 29
				}
			]
		},
		{
			"id": 294,
			"name": "mat2dInvert",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 295,
					"name": "mat2dInvert",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the inverse of the given 2d affine matrix"
					},
					"parameters": [
						{
							"id": 296,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the matrix to invert"
							},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							}
						},
						{
							"id": 297,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							},
							"defaultValue": " mat2dAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IMat2d",
						"id": 28
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2dFunctions/mat2dInvert.ts",
					"line": 12,
					"character": 27
				}
			]
		},
		{
			"id": 298,
			"name": "mat2dIsOrthogonal",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 299,
					"name": "mat2dIsOrthogonal",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns whether the matrix is an orthogonal matrix.",
						"text": "An orthogonal matrix is defined as one whose rows and columns are orthogonal unit vectors.\n(For a 2d affine matrix, this is constrained to its first 2x2 submatrix, i.e. excluding the translation.)\n\nThis is a useful property for a matrix because it means the transform preserves lengths and angles,\nso in particular it preserves normals.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link mat2dIsTranslationOnly}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 300,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the matrix to check for orthogonality"
							},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2dFunctions/mat2dIsOrthogonal.ts",
					"line": 16,
					"character": 33
				}
			]
		},
		{
			"id": 301,
			"name": "mat2dIsTranslationOnly",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 302,
					"name": "mat2dIsTranslationOnly",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns whether the matrix corresponds to only a translation.",
						"text": "Affine translation matrices have the form\n\n```\n⎡1 0 tx⎤\n⎣0 1 ty⎦\n```\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link mat2dIsOrthogonal}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 303,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the matrix to inspect"
							},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2dFunctions/mat2dIsTranslationOnly.ts",
					"line": 16,
					"character": 38
				}
			]
		},
		{
			"id": 304,
			"name": "mat2dMulMat2d",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 305,
					"name": "mat2dMulMat2d",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the result of affine matrix multiplication _m1_ × _m2_.",
						"text": "The resulting matrix is equivalent to a transform that first applies _m2_ and then applies\n_m1_; that is, `(m1×m2)v = m1(m2×v)`.\n\nAffine matrix multiplication is defined by\n\n```\n⎡m1.a m1.c m1.e⎤ ⎡m2.a m2.c m2.e⎤   ⎡r.a r.c r.e⎤\n⎢m1.b m1.d m1.f⎥ ⎢m2.b m2.d m2.f⎥ = ⎢r.b r.d r.f⎥\n⎣   0    0    1⎦ ⎣   0    0    1⎦   ⎣  0   0   1⎦\n```\n\nwhere:\n - `r.a = m1.a * m2.a + m1.c * m2.b`\n - `r.b = m1.b * m2.a + m1.d * m2.b`\n - `r.c = m1.a * m2.c + m1.c * m2.d`\n - `r.d = m1.b * m2.c + m1.d * m2.d`\n - `r.e = m1.a * m2.e + m1.c * m2.f + m1.e`\n - `r.f = m1.b * m2.e + m1.c * m2.f + m1.f`\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IMatrix}"
							},
							{
								"tag": "see",
								"text": "{@link vecTransformBy}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 306,
							"name": "m1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the first matrix to multiply"
							},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							}
						},
						{
							"id": 307,
							"name": "m2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the second matrix to multiply"
							},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							}
						},
						{
							"id": 308,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							},
							"defaultValue": " mat2dAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IMat2d",
						"id": 28
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2dFunctions/mat2dMulMat2d.ts",
					"line": 33,
					"character": 29
				}
			]
		},
		{
			"id": 174,
			"name": "mat2dReset",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 175,
					"name": "mat2dReset",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Construct a new matrix given component values.",
						"text": "The resulting matrix will have the shape\n\n```\n⎡a c e⎤\n⎣b d f⎦\n```\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link Imat2d}"
							},
							{
								"tag": "see",
								"text": "{@link mat2dAlloc}"
							},
							{
								"tag": "see",
								"text": "{@link mat2dClone}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 176,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "col 1, row 1 component, usually called `m11` in a 4x4 graphics matrix"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 177,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "col 1, row 2 component, usually called `m12` in a 4x4 graphics matrix"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 178,
							"name": "c",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "col 2, row 1 component, usually called `m21` in a 4x4 graphics matrix"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 179,
							"name": "d",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "col 2, row 2 component, usually called `m22` in a 4x4 graphics matrix"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 180,
							"name": "e",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "col 3, row 1 component, usually called `tx` or `m41` in a 4x4 graphics matrix"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 181,
							"name": "f",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "col 3, row 2 component, usually called `ty` or `m42` in a 4x4 graphics matrix"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 182,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							},
							"defaultValue": " mat2dAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IMat2d",
						"id": 28
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2dFunctions/mat2dReset.ts",
					"line": 24,
					"character": 26
				}
			]
		},
		{
			"id": 309,
			"name": "mat2dRotate",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 310,
					"name": "mat2dRotate",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Applies a rotation in radians to the given matrix, returning the result.",
						"text": "This is equivalent to _left_-multiplying the matrix by a rotation transform; that is,\nthe result of this function is equivalent to a transform that first applies the matrix _mat_\nand then rotates according to the angle _theta_.\n\nThe rotation is from the `x+` to `y+` direction, which is _counter-clockwise_ in the\nstandard Cartesian coordinate system or _clockwise_ in most standard graphics\ncoordinate systems, as in Canvas and the DOM.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link mat2dFromRotation}"
							},
							{
								"tag": "see",
								"text": "{@link mat2dMulMat2d}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 311,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the matrix to transform"
							},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							}
						},
						{
							"id": 312,
							"name": "theta",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "rotation angle in radians to apply on top of the given matrix"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 313,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							},
							"defaultValue": " mat2dAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IMat2d",
						"id": 28
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2dFunctions/mat2dRotate.ts",
					"line": 22,
					"character": 27
				}
			]
		},
		{
			"id": 314,
			"name": "mat2dScale",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 315,
					"name": "mat2dScale",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Applies a scaling transform on top of the given affine matrix, returning the result.",
						"text": "Multiplies all components of the matrix by a given scalar value.\n\nThis is equivalent to _left_-multiplying the matrix by a scaling transform; that is,\nthe result of this function is equivalent to a transform that first applies the matrix _mat_\nand then scales in both the x- and y-directions according to _scale_.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link mat2dMulMat2d}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 316,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the matrix to transform"
							},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							}
						},
						{
							"id": 317,
							"name": "scale",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 318,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							},
							"defaultValue": " mat2dAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IMat2d",
						"id": 28
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2dFunctions/mat2dScale.ts",
					"line": 19,
					"character": 26
				}
			]
		},
		{
			"id": 319,
			"name": "mat2dTranslate",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 320,
					"name": "mat2dTranslate",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Applies a translation on top of the given matrix, returning the result.",
						"text": "This is equivalent to _left_-multiplying the matrix by a translation transform; that is,\nthe result of this function is equivalent to a transform that first applies the matrix _mat_\nand then translates according to (+tx, +ty).\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link mat2dFromTranslation}"
							},
							{
								"tag": "see",
								"text": "{@link mat2dMulMat2d}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 321,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the matrix to transform"
							},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							}
						},
						{
							"id": 322,
							"name": "tx",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "x-component of the translation to apply"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 323,
							"name": "ty",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "y-component of the translation to apply"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 324,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							},
							"defaultValue": " mat2dAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IMat2d",
						"id": 28
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2dFunctions/mat2dTranslate.ts",
					"line": 19,
					"character": 30
				}
			]
		},
		{
			"id": 237,
			"name": "nearestPointResultAlloc",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 238,
					"name": "nearestPointResultAlloc",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a new NearestPointResult object in memory, with all values initialized to `NaN`.\nThis is useful to hold the result of math2d function calls in performance\ncritical workflows."
					},
					"type": {
						"type": "reference",
						"name": "INearestPointResult",
						"id": 46
					}
				}
			],
			"sources": [
				{
					"fileName": "nearestPointResultFunctions/nearestPointResultAlloc.ts",
					"line": 15,
					"character": 39
				}
			]
		},
		{
			"id": 325,
			"name": "nearestPointResultClone",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 326,
					"name": "nearestPointResultClone",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Copies the values from the given NearestPointResult into a new NearestPointResult object."
					},
					"parameters": [
						{
							"id": 327,
							"name": "nearestPointResult",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "INearestPointResult",
								"id": 46
							}
						},
						{
							"id": 328,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "INearestPointResult",
								"id": 46
							},
							"defaultValue": " nearestPointResultAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "INearestPointResult",
						"id": 46
					}
				}
			],
			"sources": [
				{
					"fileName": "nearestPointResultFunctions/nearestPointResultClone.ts",
					"line": 11,
					"character": 39
				}
			]
		},
		{
			"id": 239,
			"name": "nearestPointResultReset",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 240,
					"name": "nearestPointResultReset",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Construct a new intersection given `exists`, `x`, `y`, `t0`, and `t1` values."
					},
					"parameters": [
						{
							"id": 241,
							"name": "x",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the x-coordinate of the intersection, if an intersection point was found."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 242,
							"name": "y",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the y-coordinate of the intersection, if an intersection point was found."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 243,
							"name": "t",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 244,
							"name": "distanceValue",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 245,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "INearestPointResult",
								"id": 46
							},
							"defaultValue": " nearestPointResultAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "INearestPointResult",
						"id": 46
					}
				}
			],
			"sources": [
				{
					"fileName": "nearestPointResultFunctions/nearestPointResultReset.ts",
					"line": 15,
					"character": 39
				}
			]
		},
		{
			"id": 183,
			"name": "pointIntersectionResultAlloc",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 184,
					"name": "pointIntersectionResultAlloc",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a new PointIntersectionResult object in memory, with all values initialized to `false` and `NaN`.\nThis is useful to hold the result of math2d function calls in performance\ncritical workflows."
					},
					"type": {
						"type": "reference",
						"name": "IPointIntersectionResult",
						"id": 40
					}
				}
			],
			"sources": [
				{
					"fileName": "pointIntersectionResultFunctions/pointIntersectionResultAlloc.ts",
					"line": 16,
					"character": 44
				}
			]
		},
		{
			"id": 329,
			"name": "pointIntersectionResultClone",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 330,
					"name": "pointIntersectionResultClone",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Copies the values from the given intersection into a new intersection object."
					},
					"parameters": [
						{
							"id": 331,
							"name": "intersection",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPointIntersectionResult",
								"id": 40
							}
						},
						{
							"id": 332,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IPointIntersectionResult",
								"id": 40
							},
							"defaultValue": " pointIntersectionResultAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IPointIntersectionResult",
						"id": 40
					}
				}
			],
			"sources": [
				{
					"fileName": "pointIntersectionResultFunctions/pointIntersectionResultClone.ts",
					"line": 10,
					"character": 44
				}
			]
		},
		{
			"id": 185,
			"name": "pointIntersectionResultReset",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 186,
					"name": "pointIntersectionResultReset",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Construct a new intersection given `exists`, `x`, `y`, `t0`, and `t1` values."
					},
					"parameters": [
						{
							"id": 187,
							"name": "exists",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "whether an intersection was found. If `false`, the other passed values should be `NaN`"
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 188,
							"name": "x",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the x-coordinate of the intersection, if an intersection point was found."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 189,
							"name": "y",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the y-coordinate of the intersection, if an intersection point was found."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 190,
							"name": "t0",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the parameterization of the intersection along the first shape's geometry,\n if an intersection point was found."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 191,
							"name": "t1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the parameterization of the intersection along the second shape's geometry,\n if an intersection point was found."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 192,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IPointIntersectionResult",
								"id": 40
							},
							"defaultValue": " pointIntersectionResultAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IPointIntersectionResult",
						"id": 40
					}
				}
			],
			"sources": [
				{
					"fileName": "pointIntersectionResultFunctions/pointIntersectionResultReset.ts",
					"line": 15,
					"character": 44
				}
			]
		},
		{
			"id": 333,
			"name": "polygonAlloc",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 334,
					"name": "polygonAlloc",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a new Array object in memory to hold Polygon data.\nIts initial length is 0.",
						"text": "Data allocation functions like `polygonAlloc()` are useful to hold results of\nMath2d function calls in inner loops of performance critical workflows.\n\nAs with any optimization, you don't need it until you've profiled your\napplication! Getting into temp variable management and shared state can\nseverely hurt code readability and maintainability, so it's best to avoid\nsuch optimization if you can.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n // initialize temp memory\n const TMP0 = polygonAlloc();\n\n ... {\n   // Use this temp memory to hold result of `polygonTransformBy()`.\n   // This will avoid a heap allocation if the array doesn't have to be resized.\n   const result = polygonTransformBy(existingObj.geometry, existingObj.transform, TMP0);\n }\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"name": "IPolygon",
						"id": 51
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonAlloc.ts",
					"line": 25,
					"character": 28
				}
			]
		},
		{
			"id": 335,
			"name": "polygonContainsPointInside",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 336,
					"name": "polygonContainsPointInside",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Determines whether the point is inside the given polygon, using the even-odd fill rule."
					},
					"parameters": [
						{
							"id": 337,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the polygon to inspect"
							},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 51
							}
						},
						{
							"id": 338,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the point to check for containment\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonContainsPointInside.ts",
					"line": 9,
					"character": 42
				}
			]
		},
		{
			"id": 339,
			"name": "polygonGetBounds",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 340,
					"name": "polygonGetBounds",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Calculate the smallest bounding box that contains this polygon's geometry"
					},
					"parameters": [
						{
							"id": 341,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the polygon to compute the bounds of"
							},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 51
							}
						},
						{
							"id": 342,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							},
							"defaultValue": " boxAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IBox",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonGetBounds.ts",
					"line": 11,
					"character": 32
				}
			]
		},
		{
			"id": 343,
			"name": "polygonGetNumSides",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 344,
					"name": "polygonGetNumSides",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Return the number of sides of this polygon, which is `poly.length / 2`.",
						"text": "This function makes no attempt to identify trivial or \"empty\" sides.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link polylineGetNumSegments}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 345,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the polygon to inspect"
							},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 51
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonGetNumSides.ts",
					"line": 11,
					"character": 34
				}
			]
		},
		{
			"id": 360,
			"name": "polygonGetPerimeterLength",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 361,
					"name": "polygonGetPerimeterLength",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the total perimeter length of this polygon.",
						"tags": [
							{
								"tag": "see",
								"text": "{@link polylineGetLength}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 362,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the polygon whose perimeter should be measured"
							},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 51
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonGetPerimeterLength.ts",
					"line": 11,
					"character": 41
				}
			]
		},
		{
			"id": 363,
			"name": "polygonGetPerimeterPointAt",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 364,
					"name": "polygonGetPerimeterPointAt",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes a point along the polygon's perimeter, parameterized according to linear interpolation between\nadjacent vertices, cycling back to the start after its last vertex.",
						"text": "A polygon with _N_ sides is parameterized according to _t_, where integer values of _t0_ correspond to the polygon's\nvertices in order, and smooth values of _t0_ therein interpolate linearly between adjacent vertices, with an\nadditional segment connecting the last vertex to the first.\n"
					},
					"parameters": [
						{
							"id": 365,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the polygon to compute a point on"
							},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 51
							}
						},
						{
							"id": 366,
							"name": "t",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the parameter variable at which a point should be calculated"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 367,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 10
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonGetPerimeterPointAt.ts",
					"line": 18,
					"character": 42
				}
			]
		},
		{
			"id": 373,
			"name": "polygonGetSideLength",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 374,
					"name": "polygonGetSideLength",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the length of a polygon's side by index, starting at 0.",
						"text": "The given side index must be in the range [0, N) for a polygon with _N_ vertices:\nthis function does not accommodate \"cycling\" of polygon side indices.\n"
					},
					"parameters": [
						{
							"id": 375,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the polygon whose side should be measured"
							},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 51
							}
						},
						{
							"id": 376,
							"name": "idx",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the side index to measure, starting at 0\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonGetSideLength.ts",
					"line": 14,
					"character": 36
				}
			]
		},
		{
			"id": 368,
			"name": "polygonGetSideSegment",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 369,
					"name": "polygonGetSideSegment",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns a polygon's side by given index as a segment, starting at 0.",
						"text": "The given side index must be in the range [0, N) for a polygon with _N_ vertices:\nthis function does not accommodate \"cycling\" of polygon side indices. If an out of range\nindex is given, this function returns a segment with all `NaN` values.\n"
					},
					"parameters": [
						{
							"id": 370,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the polygon to inspect"
							},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 51
							}
						},
						{
							"id": 371,
							"name": "index",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "which side to return, starting with 0"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 372,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 13
							},
							"defaultValue": " segmentAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "ISegment",
						"id": 13
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonGetSideSegment.ts",
					"line": 16,
					"character": 37
				}
			]
		},
		{
			"id": 377,
			"name": "polygonIntersectLine",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 378,
					"name": "polygonIntersectLine",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes all locations at which a polygon crosses a given line.",
						"text": "For each returned intersection, the intersection's _t0_ describes where the point fell on the polygon's geometry\naccording to the {@link IPolygon} parameterization: integer values of _t0_ correspond to the polygon's\nvertices in order, and smooth values of _t0_ therein interpolate linearly between adjacent vertices, with an\nadditional segment connecting the last vertex to the first.\n\nThe returned points will be sorted by _t0_ increasing, i.e. they will be sorted according to the\norder in which one would visit those locations if one were to travel around the polygon's perimeter in the\norder of its vertices.\n\nAlmost equivalent to {@link lineIntersectPolygon}, except the _t0_ and _t1_ values are reversed\nand the returned intersections are sorted according to the polygon's geometry.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IPointIntersectionResult}"
							},
							{
								"tag": "see",
								"text": "{@link IPolygon}"
							},
							{
								"tag": "see",
								"text": "{@link lineIntersectPolygon}"
							},
							{
								"tag": "see",
								"text": "{@link polygonIntersectRay}"
							},
							{
								"tag": "see",
								"text": "{@link polygonIntersectSegment}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 379,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the polygon to intersect"
							},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 51
							}
						},
						{
							"id": 380,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the line to find intersections with"
							},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 23
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "IPointIntersectionResult",
							"id": 40
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonIntersectLine.ts",
					"line": 28,
					"character": 36
				}
			]
		},
		{
			"id": 391,
			"name": "polygonIntersectRay",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 392,
					"name": "polygonIntersectRay",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes all locations at which a polygon crosses a given ray.",
						"text": "For each returned intersection, the intersection's _t0_ describes where the point fell on the polygon's geometry\naccording to the {@link IPolygon} parameterization: integer values of _t0_ correspond to the polygon's\nvertices in order, and smooth values of _t0_ therein interpolate linearly between adjacent vertices, with an\nadditional segment connecting the last vertex to the first.\n\nThe returned points will be sorted by _t0_ increasing, i.e. they will be sorted according to the\norder in which one would visit those locations if one were to travel around the polygon's perimeter in the\norder of its vertices.\n\nAlmost equivalent to {@link rayIntersectPolygon}, except the _t0_ and _t1_ values are reversed\nand the returned intersections are sorted according to the polygon's geometry.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IPointIntersectionResult}"
							},
							{
								"tag": "see",
								"text": "{@link IPolygon}"
							},
							{
								"tag": "see",
								"text": "{@link rayIntersectPolygon}"
							},
							{
								"tag": "see",
								"text": "{@link polygonIntersectLine}"
							},
							{
								"tag": "see",
								"text": "{@link polygonIntersectSegment}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 393,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the polygon to intersect"
							},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 51
							}
						},
						{
							"id": 394,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the ray to find intersections with"
							},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 18
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "IPointIntersectionResult",
							"id": 40
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonIntersectRay.ts",
					"line": 28,
					"character": 35
				}
			]
		},
		{
			"id": 400,
			"name": "polygonIntersectSegment",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 401,
					"name": "polygonIntersectSegment",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes all locations at which a polygon crosses a given line segment.",
						"text": "For each returned intersection, the intersection's _t0_ describes where the point fell on the polygon's geometry\naccording to the {@link IPolygon} parameterization: integer values of _t0_ correspond to the polygon's\nvertices in order, and smooth values of _t0_ therein interpolate linearly between adjacent vertices, with an\nadditional segment connecting the last vertex to the first.\n\nThe returned points will be sorted by _t0_ increasing, i.e. they will be sorted according to the\norder in which one would visit those locations if one were to travel around the polygon's perimeter in the\norder of its vertices.\n\nAlmost equivalent to {@link segmentIntersectPolygon}, except the _t0_ and _t1_ values are reversed\nand the returned intersections are sorted according to the polygon's geometry.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IPointIntersectionResult}"
							},
							{
								"tag": "see",
								"text": "{@link IPolygon}"
							},
							{
								"tag": "see",
								"text": "{@link segmentIntersectPolygon}"
							},
							{
								"tag": "see",
								"text": "{@link polygonIntersectLine}"
							},
							{
								"tag": "see",
								"text": "{@link polygonIntersectRay}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 402,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the polygon to intersect"
							},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 51
							}
						},
						{
							"id": 403,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the line segment to find intersections with"
							},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 13
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "IPointIntersectionResult",
							"id": 40
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonIntersectSegment.ts",
					"line": 28,
					"character": 39
				}
			]
		},
		{
			"id": 425,
			"name": "polygonNearestDistanceSqToPoint",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 426,
					"name": "polygonNearestDistanceSqToPoint",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the closest the polygon's perimeter comes to a given reference point.",
						"text": "The returned value _t_ is defined according to the {@link IPolygon} parameterization:\ninteger values of _t_ correspond to the polygon's\nvertices in order, and smooth values of _t_ therein interpolate linearly between adjacent vertices, with an\nadditional segment connecting the last vertex to the first.\n\nThis function returns the squared euclidean distance in the `distanceValue` field of the result.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IPolygon}"
							},
							{
								"tag": "see",
								"text": "{@link INearestPointResult}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 427,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the polygon to inspect"
							},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 51
							}
						},
						{
							"id": 428,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the point to measure distance to"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 429,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "INearestPointResult",
								"id": 46
							},
							"defaultValue": " nearestPointResultAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "INearestPointResult",
						"id": 46
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonNearestDistanceSqToPoint.ts",
					"line": 22,
					"character": 47
				}
			]
		},
		{
			"id": 430,
			"name": "polygonTransformBy",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 431,
					"name": "polygonTransformBy",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Transforms a polygon by an affine matrix.",
						"text": "Simply transforms each of the polygon's vertices by the given matrix.\nAffine transformations and their specifics within Math2d are described in more detail\nin the {@link vecTransformBy} docs.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link vecTransformBy}"
							},
							{
								"tag": "see",
								"text": "{@link Imat2d}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 432,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "polygon to transform"
							},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 51
							}
						},
						{
							"id": 433,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "affine transform to apply"
							},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							}
						},
						{
							"id": 434,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							},
							"defaultValue": " polygonAlloc()"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "number"
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonTransformBy.ts",
					"line": 18,
					"character": 34
				}
			]
		},
		{
			"id": 132,
			"name": "polylineAlloc",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 133,
					"name": "polylineAlloc",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a new Array object in memory to hold Polyline data.\nIts initial length is 0.",
						"text": "Data allocation functions like `polylineAlloc()` are useful to hold results of\nMath2d function calls in inner loops of performance critical workflows.\n\nAs with any optimization, you don't need it until you've profiled your\napplication! Getting into temp variable management and shared state can\nseverely hurt code readability and maintainability, so it's best to avoid\nsuch optimization if you can.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n // initialize temp memory\n const TMP0 = polylineAlloc();\n\n ... {\n   // Use this temp memory to hold result of `polylineTransformBy()`.\n   // This will avoid a heap allocation if the array doesn't have to be resized.\n   const result = polylineTransformBy(existingObj.path, existingObj.transform, TMP0);\n }\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"name": "IPolyline",
						"id": 52
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineAlloc.ts",
					"line": 25,
					"character": 29
				}
			]
		},
		{
			"id": 346,
			"name": "polylineClose",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 347,
					"name": "polylineClose",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Repeats the polyline's first vertex to form a closed path."
					},
					"parameters": [
						{
							"id": 348,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 52
							}
						},
						{
							"id": 349,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							},
							"defaultValue": " polylineAlloc()"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "number"
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineClose.ts",
					"line": 10,
					"character": 29
				}
			]
		},
		{
			"id": 435,
			"name": "polylineContainsPoint",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 436,
					"name": "polylineContainsPoint",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 437,
							"name": "polyline",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 52
							}
						},
						{
							"id": 438,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineContainsPoint.ts",
					"line": 5,
					"character": 37
				}
			]
		},
		{
			"id": 123,
			"name": "polylineGetBounds",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 124,
					"name": "polylineGetBounds",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes bounding box of polyline's geometry"
					},
					"parameters": [
						{
							"id": 125,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 52
							}
						},
						{
							"id": 126,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 35
							},
							"defaultValue": " boxAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IBox",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineGetBounds.ts",
					"line": 14,
					"character": 33
				}
			]
		},
		{
			"id": 439,
			"name": "polylineGetDistanceAtT",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 440,
					"name": "polylineGetDistanceAtT",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the Euclidean distance traveled along the polyline's geometry to get to\nthe parametric point at _t_.",
						"text": "Values of _t_ are interpreted according to the {@link IPolyline} parameterization:\n_t_ should be between 0 and the polyline's vertex count minus 1, and smooth values of _t_ therein\nsignify linear interpolation between adjacent vertices of the polyline's geometry.\n\nThis function is the inverse of {@link polylineGetTAtDistance}.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IPolyline}"
							},
							{
								"tag": "see",
								"text": "{@link polylineGetTAtDistance}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 441,
							"name": "polyline",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 52
							}
						},
						{
							"id": 442,
							"name": "t",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the parametric value along the polyline's geometry to measure distance to"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineGetDistanceAtT.ts",
					"line": 20,
					"character": 38
				}
			]
		},
		{
			"id": 357,
			"name": "polylineGetLength",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 358,
					"name": "polylineGetLength",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes total length of polyline"
					},
					"parameters": [
						{
							"id": 359,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 52
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineGetLength.ts",
					"line": 10,
					"character": 33
				}
			]
		},
		{
			"id": 198,
			"name": "polylineGetNumSegments",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 199,
					"name": "polylineGetNumSegments",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the number of individual line segments in this polyline",
						"text": "This function computes the number of line segments represented by this polyline,\nwhich is always `Math.max(0, poly.length / 2 - 1)`. This function makes no effort to identify and filter\n\"trivial\" or \"empty\" segments that may exist along its path.\n"
					},
					"parameters": [
						{
							"id": 200,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 52
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineGetNumSegments.ts",
					"line": 12,
					"character": 38
				}
			]
		},
		{
			"id": 443,
			"name": "polylineGetNumVertices",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 444,
					"name": "polylineGetNumVertices",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the number of vertices in this polyline",
						"text": "Always equal to `poly.length / 2`. This function makes no attempt to remove repeated\nor NaN vertices, for instance.\n"
					},
					"parameters": [
						{
							"id": 445,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 52
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineGetNumVertices.ts",
					"line": 11,
					"character": 38
				}
			]
		},
		{
			"id": 446,
			"name": "polylineGetPointAt",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 447,
					"name": "polylineGetPointAt",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes a point along the polyline, parameterized according to linear interpolation between\nadjacent vertices.",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IPolyline}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 448,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the polyline to compute a point on"
							},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 52
							}
						},
						{
							"id": 449,
							"name": "t",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the parameter variable at which a point should be calculated"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 450,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 10
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineGetPointAt.ts",
					"line": 16,
					"character": 34
				}
			]
		},
		{
			"id": 210,
			"name": "polylineGetSegment",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 211,
					"name": "polylineGetSegment",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns a polyline's segment by given index, starting at 0."
					},
					"parameters": [
						{
							"id": 212,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 52
							}
						},
						{
							"id": 213,
							"name": "index",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 214,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 13
							},
							"defaultValue": " segmentAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "ISegment",
						"id": 13
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineGetSegment.ts",
					"line": 12,
					"character": 34
				}
			]
		},
		{
			"id": 353,
			"name": "polylineGetSegmentLength",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 354,
					"name": "polylineGetSegmentLength",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the length of one of a polyline's segments by index, starting at 0."
					},
					"parameters": [
						{
							"id": 355,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 52
							}
						},
						{
							"id": 356,
							"name": "idx",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineGetSegmentLength.ts",
					"line": 9,
					"character": 40
				}
			]
		},
		{
			"id": 451,
			"name": "polylineGetTAtDistance",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 452,
					"name": "polylineGetTAtDistance",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the parametric value _t_ along the polyline corresponding to a distance _d_.",
						"text": "This function can be used along with {@link polylineGetPointAt} to find the actual\n(x, y) point corresponding to a distance traveled _d_ along the polyline.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IPolyline}"
							},
							{
								"tag": "see",
								"text": "{@link polylineGetDistanceAtT}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 453,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the polyline to inspect"
							},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 52
							}
						},
						{
							"id": 454,
							"name": "d",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "distance along the polyline to travel"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineGetTAtDistance.ts",
					"line": 17,
					"character": 38
				}
			]
		},
		{
			"id": 455,
			"name": "polylineGetVertex",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 456,
					"name": "polylineGetVertex",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Retrieves a vertex from this polyline's geometry, starting at index 0"
					},
					"parameters": [
						{
							"id": 457,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 52
							}
						},
						{
							"id": 458,
							"name": "index",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 459,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 10
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineGetVertex.ts",
					"line": 12,
					"character": 33
				}
			]
		},
		{
			"id": 460,
			"name": "polylineIntersectLine",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 461,
					"name": "polylineIntersectLine",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes all locations at which a polyline crosses a given line.",
						"text": "For each returned intersection, the intersection's _t0_ describes where the point fell on the polyline's geometry\naccording to the {@link IPolyline} parameterization:\nvalues of _t0_ are between 0 and the polyline's vertex count minus 1, and smooth values of _t0_ therein\nsignify linear interpolation between adjacent vertices along the polyline's geometry.\n\nThe returned points will be sorted by _t0_ increasing, i.e. they will be sorted according to the\norder in which one would visit those locations if one were to travel from the polyline's start to its end\nalong its segments.\n\nAlmost equivalent to {@link lineIntersectPolyline}, except the _t0_ and _t1_ values are reversed\nand the returned intersections are sorted according to the polyline's geometry.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IPointIntersectionResult}"
							},
							{
								"tag": "see",
								"text": "{@link IPolyline}"
							},
							{
								"tag": "see",
								"text": "{@link lineIntersectPolyline}"
							},
							{
								"tag": "see",
								"text": "{@link polylineIntersectRay}"
							},
							{
								"tag": "see",
								"text": "{@link polylineIntersectSegment}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 462,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 52
							}
						},
						{
							"id": 463,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 23
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "IPointIntersectionResult",
							"id": 40
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineIntersectLine.ts",
					"line": 28,
					"character": 37
				}
			]
		},
		{
			"id": 464,
			"name": "polylineIntersectRay",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 465,
					"name": "polylineIntersectRay",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes all locations at which a polyline crosses a given ray.",
						"text": "For each returned intersection, the intersection's _t0_ describes where the point fell on the polyline's geometry\naccording to the {@link IPolyline} parameterization:\nvalues of _t0_ are between 0 and the polyline's vertex count minus 1, and smooth values of _t0_ therein\nsignify linear interpolation between adjacent vertices along the polyline's geometry.\n\nThe returned points will be sorted by _t0_ increasing, i.e. they will be sorted according to the\norder in which one would visit those locations if one were to travel from the polyline's start to its end\nalong its segments.\n\nAlmost equivalent to {@link rayIntersectPolyline}, except the _t0_ and _t1_ values are reversed\nand the returned intersections are sorted according to the polyline's geometry.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IPointIntersectionResult}"
							},
							{
								"tag": "see",
								"text": "{@link IPolyline}"
							},
							{
								"tag": "see",
								"text": "{@link lineIntersectPolyline}"
							},
							{
								"tag": "see",
								"text": "{@link polylineIntersectLine}"
							},
							{
								"tag": "see",
								"text": "{@link polylineIntersectSegment}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 466,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 52
							}
						},
						{
							"id": 467,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 18
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "IPointIntersectionResult",
							"id": 40
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineIntersectRay.ts",
					"line": 28,
					"character": 36
				}
			]
		},
		{
			"id": 468,
			"name": "polylineIntersectSegment",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 469,
					"name": "polylineIntersectSegment",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes all locations at which a polyline crosses a given line segment.",
						"text": "For each returned intersection, the intersection's _t0_ describes where the point fell on the polyline's geometry\naccording to the {@link IPolyline} parameterization:\nvalues of _t0_ are between 0 and the polyline's vertex count minus 1, and smooth values of _t0_ therein\nsignify linear interpolation between adjacent vertices along the polyline's geometry.\n\nThe returned points will be sorted by _t0_ increasing, i.e. they will be sorted according to the\norder in which one would visit those locations if one were to travel from the polyline's start to its end\nalong its segments.\n\nAlmost equivalent to {@link segmentIntersectPolyline}, except the _t0_ and _t1_ values are reversed\nand the returned intersections are sorted according to the polyline's geometry.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IPointIntersectionResult}"
							},
							{
								"tag": "see",
								"text": "{@link IPolyline}"
							},
							{
								"tag": "see",
								"text": "{@link segmentIntersectPolyline}"
							},
							{
								"tag": "see",
								"text": "{@link polylineIntersectLine}"
							},
							{
								"tag": "see",
								"text": "{@link polylineIntersectRay}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 470,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 52
							}
						},
						{
							"id": 471,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 13
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "IPointIntersectionResult",
							"id": 40
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineIntersectSegment.ts",
					"line": 28,
					"character": 40
				}
			]
		},
		{
			"id": 350,
			"name": "polylineIsClosed",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 351,
					"name": "polylineIsClosed",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns whether the polyline's last vertex equals its first",
						"text": "Computes whether the polyline forms a closed shape, i.e. its last vertex\nis the same as its first. As a special case, the empty polyline `[]` is\nconsidered closed.\n"
					},
					"parameters": [
						{
							"id": 352,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 52
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineIsClosed.ts",
					"line": 13,
					"character": 32
				}
			]
		},
		{
			"id": 420,
			"name": "polylineNearestDistanceSqToPoint",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 421,
					"name": "polylineNearestDistanceSqToPoint",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Finds the closest the polyline comes to a given reference point.",
						"text": "The returned value _t_ is defined according to the {@link IPolyline} parameterization:\nvalues of _t0_ are between 0 and the polyline's vertex count minus 1, and smooth values of T\nsignify linear interpolation between the two adjacent vertices along the polyline's geometry.\n\nThis function returns the squared euclidean distance in the `distanceValue` field of the result.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IPolyline}"
							},
							{
								"tag": "see",
								"text": "{@link INearestPointResult}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 422,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the polyline to inspect"
							},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 52
							}
						},
						{
							"id": 423,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the point to measure distance to"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 424,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "INearestPointResult",
								"id": 46
							},
							"defaultValue": " nearestPointResultAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "INearestPointResult",
						"id": 46
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineNearestDistanceSqToPoint.ts",
					"line": 25,
					"character": 48
				}
			]
		},
		{
			"id": 134,
			"name": "polylineTransformBy",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 135,
					"name": "polylineTransformBy",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Transforms a polyline by an affine matrix.",
						"text": "Simply transforms each of the polyline's vertices by the given matrix.\nAffine transformations and their specifics within Math2d are described in more detail\nin the {@link vecTransformBy} docs.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link vecTransformBy}"
							},
							{
								"tag": "see",
								"text": "{@link Imat2d}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 136,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "polyline to transform"
							},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 52
							}
						},
						{
							"id": 137,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "affine transform to apply"
							},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							}
						},
						{
							"id": 138,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							},
							"defaultValue": " polylineAlloc()"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "number"
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineTransformBy.ts",
					"line": 21,
					"character": 35
				}
			]
		},
		{
			"id": 472,
			"name": "polylineTrim",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 473,
					"name": "polylineTrim",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Trims a polyline to a range of its _t_ parameter.",
						"text": "This function trims geometry from either or both ends of the polyline, kind of like a \"substring\"\noperation. Note that fractional values are allowed on the bounding _t_ parameters, which may slice off\nonly parts of segments to form new vertices.\n\nA polyline's parameterization is defined according to _t_, where\nvalues of _t_ are between 0 and the polyline's vertex count minus 1, and smooth values of _t_ therein\nsignify linear interpolation between adjacent vertices along the polyline's geometry.\n\nBoth the `tStart` and `tEnd` parameters will be clamped to their allowed domains [0, _N_-1] for a\npolyline of _N_ vertices.\n"
					},
					"parameters": [
						{
							"id": 474,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the polyline to trim"
							},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 52
							}
						},
						{
							"id": 475,
							"name": "tStart",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "minimum _t_ value to include. The resulting polyline will have its last vertex at\n the point described by this value on the original polyline. Internally, this value will be clamped\n to the allowed domain `[0, poly.length/2 - 1]`."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 476,
							"name": "tEnd",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 477,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							},
							"defaultValue": " polylineAlloc()"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineTrim.ts",
					"line": 30,
					"character": 28
				}
			]
		},
		{
			"id": 478,
			"name": "rayAlloc",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 479,
					"name": "rayAlloc",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a new Ray object in memory, with all values initialized to `NaN`.",
						"text": "Data allocation functions like `rayAlloc()` are useful to hold results of\nMath2d function calls in inner loops of performance critical workflows.\n\nAs with any optimization, you don't need it until you've profiled your\napplication! Getting into temp variable management and shared state can\nseverely hurt code readability and maintainability, so it's best to avoid\nsuch optimization if you can.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n // initialize temp memory\n const TMP0 = rayAlloc();\n\n ... {\n   // Use this temp memory to hold result of `rayLookAt()`.\n   // This avoids a heap allocation.\n   const result = rayLookAt(existingObj.source, existingObj.target, TMP0);\n }\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"name": "IRay",
						"id": 18
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayAlloc.ts",
					"line": 31,
					"character": 24
				}
			]
		},
		{
			"id": 487,
			"name": "rayClone",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 488,
					"name": "rayClone",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Copies the values from the given ray into a new ray."
					},
					"parameters": [
						{
							"id": 489,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "source ray from which values should be copied"
							},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 18
							}
						},
						{
							"id": 490,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 18
							},
							"defaultValue": " rayAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IRay",
						"id": 18
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayClone.ts",
					"line": 11,
					"character": 24
				}
			]
		},
		{
			"id": 491,
			"name": "rayContainsPoint",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 492,
					"name": "rayContainsPoint",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Determines if the point is on the ray",
						"text": "This function tests whether the point lies along the ray's geometry,\nusing allowed error _ε_ = 1e-8. The point must lie on the positive side\n of the ray (_t_ > 0).\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link lineContainsPoint}"
							},
							{
								"tag": "see",
								"text": "{@link lineWhichSide}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 493,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the ray to inspect"
							},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 18
							}
						},
						{
							"id": 494,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "point to check whether it's on the ray"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayContainsPoint.ts",
					"line": 18,
					"character": 32
				}
			]
		},
		{
			"id": 495,
			"name": "rayGetPointAt",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 496,
					"name": "rayGetPointAt",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Gets a point along the ray, parameterized according to distance along its\ndirection vector.",
						"text": "Retrieves a point on the ray's geometry according to moving distance _t_\nalong the direction vector from its initial point. This function does allow\nnegative values of _t_, returning points in the direction \"behind\" the ray.\n\nSynonymous to {@link lineGetPointAt}.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IRay}"
							},
							{
								"tag": "see",
								"text": "{@link lineGetPointAt}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 497,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the ray to inspect"
							},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 18
							}
						},
						{
							"id": 498,
							"name": "t",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "distance along the ray at which to compute point"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 499,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 10
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayGetPointAt.ts",
					"line": 21,
					"character": 29
				}
			]
		},
		{
			"id": 500,
			"name": "rayIntersectLine",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 501,
					"name": "rayIntersectLine",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the intersection point between the given ray and line, if it exists.",
						"text": "Finds the location at which the ray and line meet. If the ray starts on one side of the line and points away from it,\nor they are parallel, this function returns no intersection.\nIf the ray and line are the same (i.e. they are parallel and coincide with one another),\nthis function returns the ray's initial point.\n\nThe returned value is an {@link IPointIntersectionResult} object which will have have the\n`exists` flag set to `true` iff an intersection was found. It additionally\nhas the following fields, if the intersection exists:\n\n- `x` – the x-coordinate of the point of intersection\n- `y` – the y-coordinate of the point of intersection\n- `t0` – where along the ray's geometry the intersection was found,\n     according to the ray's parameterization\n- `t1` – where along the line's geometry the intersection was found,\n     according to the line's parameterization\n\nAlmost equivalent to {@link lineIntersectRay}, except the returned intersection reverses its _t0_ and _t1_.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link rayIntersectPolyline}"
							},
							{
								"tag": "see",
								"text": "{@link rayIntersectRay}"
							},
							{
								"tag": "see",
								"text": "{@link rayIntersectSegment}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 502,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the ray to intersect"
							},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 18
							}
						},
						{
							"id": 503,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the line to intersect"
							},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 23
							}
						},
						{
							"id": 504,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPointIntersectionResult",
								"id": 40
							},
							"defaultValue": " pointIntersectionResultAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IPointIntersectionResult",
						"id": 40
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayIntersectLine.ts",
					"line": 34,
					"character": 32
				}
			]
		},
		{
			"id": 505,
			"name": "rayIntersectPolyline",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 506,
					"name": "rayIntersectPolyline",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes all locations at which a ray crosses a given polyline.",
						"text": "For each returned intersection, the intersection's _t0_ describes where the point fell on the ray's geometry\naccording to {@link IRay} parameterization:\n_t0_ ≥ 0, corresponds to travel of distance _t0_ along the ray's direction vector. (See {@link rayGetPointAt}.)\n\nThe returned points will be sorted by _t0_ increasing, i.e. they will be sorted according to the\norder in which one would hit the intersections if one were to start from the ray's initial point and\nshoot along its direction vector.\n\nAlmost equivalent to {@link polylineIntersectRay}, except the _t0_ and _t1_ values are reversed\nand the returned intersections are sorted according to the ray's geometry.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IPointIntersectionResult}"
							},
							{
								"tag": "see",
								"text": "{@link IPolyline}"
							},
							{
								"tag": "see",
								"text": "{@link lineIntersectPolyline}"
							},
							{
								"tag": "see",
								"text": "{@link polylineIntersectLine}"
							},
							{
								"tag": "see",
								"text": "{@link polylineIntersectSegment}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 507,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 18
							}
						},
						{
							"id": 508,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 52
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "IPointIntersectionResult",
							"id": 40
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayIntersectPolyline.ts",
					"line": 28,
					"character": 36
				}
			]
		},
		{
			"id": 509,
			"name": "rayIntersectRay",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 510,
					"name": "rayIntersectRay",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the intersection point between the two rays, if it exists.",
						"text": "Finds the location at which the two rays meet. If the rays point away or \"miss\" each other,\nor they are parallel, this function returns no intersection.\n\nThe returned value is an {@link IPointIntersectionResult} object which will have have the\n`exists` flag set to `true` iff an intersection was found. It additionally\nhas the following fields, if the intersection exists:\n\n- `x` – the x-coordinate of the point of intersection\n- `y` – the y-coordinate of the point of intersection\n- `t0` – where along the first ray's geometry the intersection was found,\n     according to the ray's parameterization\n- `t1` – where along the second ray's geometry the intersection was found,\n     according to the ray's parameterization\n"
					},
					"parameters": [
						{
							"id": 511,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the first ray to intersect"
							},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 18
							}
						},
						{
							"id": 512,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the second ray to intersect"
							},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 18
							}
						},
						{
							"id": 513,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IPointIntersectionResult",
								"id": 40
							},
							"defaultValue": " pointIntersectionResultAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IPointIntersectionResult",
						"id": 40
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayIntersectRay.ts",
					"line": 28,
					"character": 31
				}
			]
		},
		{
			"id": 381,
			"name": "rayIntersectSegment",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 382,
					"name": "rayIntersectSegment",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the intersection point between the ray and the segment, if it exists.",
						"text": "Finds the location at which the ray and segment meet. If the ray \"misses\" the segment,\nthis function returns no intersection. For edge cases where the ray completely overlaps the segment,\nor starts within the segment, this function returns the _first_ point that the intersection occurs,\naccording to the ray's parameterization.\n\nThe returned value is an {@link IPointIntersectionResult} object which will have have the\n`exists` flag set to `true` iff an intersection was found. It additionally\nhas the following fields, if the intersection exists:\n\n- `x` – the x-coordinate of the point of intersection\n- `y` – the y-coordinate of the point of intersection\n- `t0` – where along the ray's geometry the intersection was found,\n     according to the ray's parameterization\n- `t1` – where along the segment's geometry the intersection was found,\n     according to the segment's parameterization\n\nAlmost equivalent to {@link segmentIntersectRay}, except the _t0_ and _t1_ values are reversed.\n"
					},
					"parameters": [
						{
							"id": 383,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the ray to intersect"
							},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 18
							}
						},
						{
							"id": 384,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the segment to intersect"
							},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 13
							}
						},
						{
							"id": 385,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IPointIntersectionResult",
								"id": 40
							},
							"defaultValue": " pointIntersectionResultAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IPointIntersectionResult",
						"id": 40
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayIntersectSegment.ts",
					"line": 34,
					"character": 35
				}
			]
		},
		{
			"id": 514,
			"name": "rayLookAt",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 515,
					"name": "rayLookAt",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Constructs a ray from an initial point, pointing in the direction of a target point.",
						"text": "This function initializes a ray with a given `from` initial point, and with a direction vector\nthat goes through the target `to` point. The direction vector will be normalized even if `from`\nand `to` are not one unit apart.\n\nIf `from` and `to` are the same point, the returned vector will still have the `from` initial\npoint but its direction vector will be (NaN, NaN).\n"
					},
					"parameters": [
						{
							"id": 516,
							"name": "from",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "initial point of the ray"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 517,
							"name": "to",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "point that the ray should go through"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 518,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 18
							},
							"defaultValue": " rayAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "ILine",
						"id": 23
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayLookAt.ts",
					"line": 19,
					"character": 25
				}
			]
		},
		{
			"id": 523,
			"name": "rayNearestDistanceSqToPoint",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 524,
					"name": "rayNearestDistanceSqToPoint",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Determines the closest the ray comes to a given reference point",
						"text": "If the point lies on the positive side of the ray (_t_ ≥ 0), this function\nfinds the projection of the point onto the ray's geometry.\nIf the point lies on the negative side of the ray (_t_ < 0),\nthis function returns the ray's initial point.\n\nThis function returns the squared distance in the result's `distanceValue`.\nThis is preferred over returning the (non-squared) distance because points\nbehind the ray need to measure distance to the ray's initial point, which would otherwise involve a square root.\nIf you know the point lies in front of the ray, and want to measure the distance while avoiding a square\nroot, prefer {@link lineNearestDistanceToPoint}. To determine which side of the ray a point lies on,\nsee {@link lineProjectPoint}.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link lineProjectPoint}"
							},
							{
								"tag": "see",
								"text": "{@link lineNearestDistanceToPoint}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 525,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the ray to inspect"
							},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 18
							}
						},
						{
							"id": 526,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the reference point to project onto the ray"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 527,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "INearestPointResult",
								"id": 46
							},
							"defaultValue": " nearestPointResultAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "INearestPointResult",
						"id": 46
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayNearestDistanceSqToPoint.ts",
					"line": 29,
					"character": 43
				}
			]
		},
		{
			"id": 480,
			"name": "rayReset",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 481,
					"name": "rayReset",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Construct a new ray given an (x0, y0) initial point and (dirX, dirY) direction vector.",
						"text": "This function creates a new ray from given values. The (dirX, dirY) values given should\ndescribe a unit vector: no checks or operations are done internally to guarantee that is so.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IRay}"
							},
							{
								"tag": "see",
								"text": "{@link rayAlloc}"
							},
							{
								"tag": "see",
								"text": "{@link rayClone}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 482,
							"name": "x0",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "x-coordinate of the ray's initial point"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 483,
							"name": "y0",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "y-coordinate of the ray's initial point"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 484,
							"name": "dirX",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "x-coordinate of the ray's direction vector, which should form a unit vector\n along with the provided `dirY`"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 485,
							"name": "dirY",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "y-coordinate of the ray's direction vector, which should form a unit vector\n along with the provided `dirX`"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 486,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 18
							},
							"defaultValue": " rayAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IRay",
						"id": 18
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayReset.ts",
					"line": 20,
					"character": 24
				}
			]
		},
		{
			"id": 528,
			"name": "rayTransformBy",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 529,
					"name": "rayTransformBy",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Transforms a ray by an affine matrix.",
						"text": "This function computes the result of applying a transform to the ray's geometry.\nThe resulting initial point will be the result of applying the given transform to the original\ninitial point, and its direction will be the result of applying any rotations or shears from\nthe matrix. The resulting direction vector will be correctly normalized when applicable.\n\nAffine transformations and their specifics within Math2d are described in more detail\nin the {@link vecTransformBy} docs.\n\nSynonymous to {@link lineTransformBy}.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link vecTransformBy}"
							},
							{
								"tag": "see",
								"text": "{@link Imat2d}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 530,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the ray to transform"
							},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 18
							}
						},
						{
							"id": 531,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the affine transform to apply"
							},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							}
						},
						{
							"id": 532,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 18
							},
							"defaultValue": " rayAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "ILine",
						"id": 23
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayTransformBy.ts",
					"line": 24,
					"character": 30
				}
			]
		},
		{
			"id": 201,
			"name": "segmentAlloc",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 202,
					"name": "segmentAlloc",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a new Segment object in memory, with all values initialized to `NaN`.",
						"text": "Data allocation functions like `segmentAlloc()` are useful to hold results of\nMath2d function calls in inner loops of performance critical workflows.\n\nAs with any optimization, you don't need it until you've profiled your\napplication! Getting into temp variable management and shared state can\nseverely hurt code readability and maintainability, so it's best to avoid\nsuch optimization if you can.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n // initialize temp memory\n const TMP0 = segmentAlloc();\n\n ... {\n   // Use this temp memory to hold result of `polygonGetSideSegment()`.\n   // This avoids a heap allocation.\n   const result = polygonGetSideSegment(existingObj.geometry, 0, TMP0);\n }\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"name": "ISegment",
						"id": 13
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentAlloc.ts",
					"line": 31,
					"character": 28
				}
			]
		},
		{
			"id": 533,
			"name": "segmentGetEndpoint0",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 534,
					"name": "segmentGetEndpoint0",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Retrieves the starting endpoint (_t_ = 0) of the segment, as a vector."
					},
					"parameters": [
						{
							"id": 535,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "segment to inspect"
							},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 13
							}
						},
						{
							"id": 536,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 10
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentGetEndpoint0.ts",
					"line": 11,
					"character": 35
				}
			]
		},
		{
			"id": 537,
			"name": "segmentGetEndpoint1",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 538,
					"name": "segmentGetEndpoint1",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Retrives the ending endpoint (_t_ = 1) of the segment, as a vector."
					},
					"parameters": [
						{
							"id": 539,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "segment to inspect"
							},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 13
							}
						},
						{
							"id": 540,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 10
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentGetEndpoint1.ts",
					"line": 11,
					"character": 35
				}
			]
		},
		{
			"id": 215,
			"name": "segmentGetLength",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 216,
					"name": "segmentGetLength",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the length of the line segment",
						"text": "This is simply `√((x1 - x0)² + (y1 - y0)²)`.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link segmentGetLengthSq}"
							},
							{
								"tag": "see",
								"text": "{@link vecDistance}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 217,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "segment to measure"
							},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 13
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentGetLength.ts",
					"line": 12,
					"character": 32
				}
			]
		},
		{
			"id": 541,
			"name": "segmentGetLengthSq",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 542,
					"name": "segmentGetLengthSq",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the squared length of the line segment",
						"text": "This is simply `(x1 - x0)² + (y1 - y0)²`.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link segmentGetLength}"
							},
							{
								"tag": "see",
								"text": "{@link vecDistanceSq}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 543,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "segment to measure"
							},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 13
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentGetLengthSq.ts",
					"line": 12,
					"character": 34
				}
			]
		},
		{
			"id": 544,
			"name": "segmentGetPointAt",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 545,
					"name": "segmentGetPointAt",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Gets a point along the line segment, parameterized according to linear interpolation\nbetween its endpoints.",
						"text": "A segment is parameterized according to linear interpolation between its endpoints,\nwhere _t_ = 0 represents its starting vertex and _t_ = 1 its ending vertex.\nSmooth values of _t_ within that range will move along the segment, so for example\n_t_ = 0.5 is its midpoint.\n\nThis function does allow for _t_ values outside the range `[0, 1]`, which will return\npoints in the same direction as the segment but outside in either direction.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link ISegment}"
							},
							{
								"tag": "see",
								"text": "{@link vecLerp}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 546,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the segment to inspect"
							},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 13
							}
						},
						{
							"id": 547,
							"name": "t",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "linear ratio along the segment to return"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 548,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 10
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentGetPointAt.ts",
					"line": 23,
					"character": 33
				}
			]
		},
		{
			"id": 223,
			"name": "segmentIntersectLine",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 224,
					"name": "segmentIntersectLine",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the intersection point between the given segment and line, if it exists.",
						"text": "Finds the location at which the line segment and line meet.\nIf the line \"misses\" the segment, this function returns no intersection.\nIf the line completely overlaps the segment, this function returns the segment's starting vertex.\n\nThe returned value is an {@link IPointIntersectionResult} object which will have have the\n`exists` flag set to `true` iff an intersection was found. It additionally\nhas the following fields, if the intersection exists:\n\n- `x` – the x-coordinate of the point of intersection\n- `y` – the y-coordinate of the point of intersection\n- `t0` – where along the segment's geometry the intersection was found,\n     according to the segment's parameterization\n- `t1` – where along the line's geometry the intersection was found,\n     according to the line's parameterization\n\nAlmost equivalent to {@link lineIntersectSegment}, except the returned intersection reverses its _t0_ and _t1_.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link segmentIntersectPolyline}"
							},
							{
								"tag": "see",
								"text": "{@link segmentIntersectRay}"
							},
							{
								"tag": "see",
								"text": "{@link segmentIntersectSegment}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 225,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the segment to intersect"
							},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 13
							}
						},
						{
							"id": 226,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the line to find intersection with"
							},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 23
							}
						},
						{
							"id": 227,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPointIntersectionResult",
								"id": 40
							},
							"defaultValue": " pointIntersectionResultAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IPointIntersectionResult",
						"id": 40
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentIntersectLine.ts",
					"line": 33,
					"character": 36
				}
			]
		},
		{
			"id": 549,
			"name": "segmentIntersectPolyline",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 550,
					"name": "segmentIntersectPolyline",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes all locations at which a line segment meets a given polyline.",
						"text": "For each returned intersection, the intersection's _t0_ describes where the point fell on the segment's geometry\naccording to {@link ISegment} parameterization:\nlinear interpolation between its endpoints where _t0_ = 0 represents its starting vertex\nand _t0_ = 1 its ending vertex.\nSmooth values of _t_ within that range will move along the segment, so for example\n_t0_ = 0.5 is its midpoint.\n\nThe returned points will be sorted by _t0_ increasing, i.e. they will be sorted according to the\norder in which one would visit those locations if one were to travel from the line segment's starting\nvertex to its ending vertex.\n\nAlmost equivalent to {@link polylineIntersectSegment}, except the _t0_ and _t1_ values are reversed\nand the returned intersections are sorted according to the segment's geometry.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IPointIntersectionResult}"
							},
							{
								"tag": "see",
								"text": "{@link ISegment}"
							},
							{
								"tag": "see",
								"text": "{@link polylineIntersectSegment}"
							},
							{
								"tag": "see",
								"text": "{@link segmentIntersectLine}"
							},
							{
								"tag": "see",
								"text": "{@link segmentIntersectRay}"
							},
							{
								"tag": "see",
								"text": "{@link segmentIntersectSegment}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 551,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the segment to intersect"
							},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 13
							}
						},
						{
							"id": 552,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the polyline to find intersections with"
							},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 52
							}
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "IPointIntersectionResult",
							"id": 40
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentIntersectPolyline.ts",
					"line": 32,
					"character": 40
				}
			]
		},
		{
			"id": 386,
			"name": "segmentIntersectRay",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 387,
					"name": "segmentIntersectRay",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the intersection point between the ray and the segment, if it exists.",
						"text": "Finds the location at which the ray and segment meet. If the ray \"misses\" the segment,\nthis function returns no intersection. For edge cases where the ray completely overlaps the segment,\nor starts within the segment, this function returns the _first_ point that the intersection occurs,\naccording to the segment's parameterization.\n\nThe returned value is an {@link IPointIntersectionResult} object which will have have the\n`exists` flag set to `true` iff an intersection was found. It additionally\nhas the following fields, if the intersection exists:\n\n- `x` – the x-coordinate of the point of intersection\n- `y` – the y-coordinate of the point of intersection\n- `t0` – where along the segment's geometry the intersection was found,\n     according to the segment's parameterization\n- `t1` – where along the ray's geometry the intersection was found,\n     according to the ray's parameterization\n\nAlmost equivalent to {@link rayIntersectSegment}, except the _t0_ and _t1_ values are reversed.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IPointIntersectionResult}"
							},
							{
								"tag": "see",
								"text": "{@link ISegment}"
							},
							{
								"tag": "see",
								"text": "{@link segmentIntersectLine}"
							},
							{
								"tag": "see",
								"text": "{@link segmentIntersectPolyline}"
							},
							{
								"tag": "see",
								"text": "{@link segmentIntersectSegment}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 388,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the segment to intersect"
							},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 13
							}
						},
						{
							"id": 389,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the ray to find intersection with"
							},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 18
							}
						},
						{
							"id": 390,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPointIntersectionResult",
								"id": 40
							},
							"defaultValue": " pointIntersectionResultAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IPointIntersectionResult",
						"id": 40
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentIntersectRay.ts",
					"line": 36,
					"character": 35
				}
			]
		},
		{
			"id": 395,
			"name": "segmentIntersectSegment",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 396,
					"name": "segmentIntersectSegment",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the intersection point between the two line segments, if it exists.",
						"text": "Finds the location at which the two segments meet. If the two segments \"miss\" each other,\nthis function returns no intersection. If the two segments overlap along an entire interval\n(i.e. they are parallel and lie partly on top of each other), this function returns the first\npoint they have in common, according to the first segment's parameterization.\n\nThe returned value is an {@link IPointIntersectionResult} object which will have have the\n`exists` flag set to `true` iff an intersection was found. It additionally\nhas the following fields, if the intersection exists:\n\n- `x` – the x-coordinate of the point of intersection\n- `y` – the y-coordinate of the point of intersection\n- `t0` – where along the first segment's geometry the intersection was found,\n     according to the first segment's parameterization\n- `t1` – where along the second segment's geometry the intersection was found,\n     according to the second segment's parameterization\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IPointIntersectionResult}"
							},
							{
								"tag": "see",
								"text": "{@link ISegment}"
							},
							{
								"tag": "see",
								"text": "{@link segmentIntersectLine}"
							},
							{
								"tag": "see",
								"text": "{@link segmentIntersectPolyline}"
							},
							{
								"tag": "see",
								"text": "{@link segmentIntersectRay}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 397,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the first segment to intersect"
							},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 13
							}
						},
						{
							"id": 398,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the second segment to find intersections with"
							},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 13
							}
						},
						{
							"id": 399,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPointIntersectionResult",
								"id": 40
							},
							"defaultValue": " pointIntersectionResultAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IPointIntersectionResult",
						"id": 40
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentIntersectSegment.ts",
					"line": 37,
					"character": 39
				}
			]
		},
		{
			"id": 415,
			"name": "segmentNearestDistanceSqToPoint",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 416,
					"name": "segmentNearestDistanceSqToPoint",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Finds the closest the segment comes to a given reference point.",
						"text": "This function returns the squared euclidean distance in the `distanceValue` field of the result.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link ISegment}"
							},
							{
								"tag": "see",
								"text": "{@link INearestPointResult}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 417,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "segment to inspect"
							},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 13
							}
						},
						{
							"id": 418,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "point to measure squared distance to"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 419,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "INearestPointResult",
								"id": 46
							},
							"defaultValue": " nearestPointResultAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "INearestPointResult",
						"id": 46
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentNearestDistanceSqToPoint.ts",
					"line": 22,
					"character": 47
				}
			]
		},
		{
			"id": 203,
			"name": "segmentReset",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 204,
					"name": "segmentReset",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Construct a new line segment given an (x0, y0) starting vertex and (x1, y1) ending vertex.\nThe two points are allowed to be the same.",
						"tags": [
							{
								"tag": "see",
								"text": "{@link ISegment}"
							},
							{
								"tag": "see",
								"text": "{@link segmentAlloc}"
							},
							{
								"tag": "see",
								"text": "{@link segmentClone}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 205,
							"name": "x0",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "x-coordinate of the segment's starting vertex"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 206,
							"name": "y0",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "y-coordinate of the segment's starting vertex"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 207,
							"name": "x1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "x-coordinate of the segment's ending vertex"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 208,
							"name": "y1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "y-coordinate of the segment's ending vertex"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 209,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 13
							},
							"defaultValue": " segmentAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "ISegment",
						"id": 13
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentReset.ts",
					"line": 16,
					"character": 28
				}
			]
		},
		{
			"id": 553,
			"name": "segmentReverse",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 554,
					"name": "segmentReverse",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the reverse of the segment, i.e. swapping its starting vertex and ending vertex."
					},
					"parameters": [
						{
							"id": 555,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the segment to reverse"
							},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 13
							}
						},
						{
							"id": 556,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 13
							},
							"defaultValue": " segmentAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "ISegment",
						"id": 13
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentReverse.ts",
					"line": 11,
					"character": 30
				}
			]
		},
		{
			"id": 557,
			"name": "vecAdd",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 558,
					"name": "vecAdd",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the result of adding the two given vectors.",
						"tags": [
							{
								"tag": "see",
								"text": "{@link vecSubtract}"
							},
							{
								"tag": "see",
								"text": "{@link vecScale}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 559,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 560,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 561,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 10
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecAdd.ts",
					"line": 14,
					"character": 22
				}
			]
		},
		{
			"id": 116,
			"name": "vecAlloc",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 117,
					"name": "vecAlloc",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a new Vec object in memory, with all values initialized to `NaN`.",
						"text": "Data allocation functions like `vecAlloc()` are useful to hold results of\nMath2d function calls in inner loops of performance critical workflows.\n\nAs with any optimization, you don't need it until you've profiled your\napplication! Getting into temp variable management and shared state can\nseverely hurt code readability and maintainability, so it's best to avoid\nsuch optimization if you can.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n // initialize temp memory\n const TMP0 = vecAlloc();\n\n ... {\n   // Use this temp memory to hold result of `vecNormalize()`.\n   // This avoids a heap allocation.\n   const result = vecNormalize(existingObj.velocity, TMP0);\n }\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 10
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecAlloc.ts",
					"line": 29,
					"character": 24
				}
			]
		},
		{
			"id": 562,
			"name": "vecClone",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 563,
					"name": "vecClone",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Copies the values from the given vector into a new vector."
					},
					"parameters": [
						{
							"id": 564,
							"name": "vec",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the vector to copy"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 565,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 10
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecClone.ts",
					"line": 11,
					"character": 24
				}
			]
		},
		{
			"id": 404,
			"name": "vecCross",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 405,
					"name": "vecCross",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the two-dimensional cross product of the two vectors.",
						"text": "The two-dimensional cross product is defined to be the scalar value:\n\n```\nu × v = u.x * v.y - u.y * v.x\n```\n\nNote that the cross product is antisymmetric, i.e. `u × v = -v × u`.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link vecDot}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 406,
							"name": "u",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the first vector"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 407,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the vector to cross with the first"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecCross.ts",
					"line": 18,
					"character": 24
				}
			]
		},
		{
			"id": 566,
			"name": "vecDistance",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 567,
					"name": "vecDistance",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the straight-line (Euclidean) distance between the two points",
						"tags": [
							{
								"tag": "see",
								"text": "{@link vecDistanceSq}"
							},
							{
								"tag": "see",
								"text": "{@link vecGetLength}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 568,
							"name": "u",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the first point"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 569,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the second point, to which distance should be measured from the first"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecDistance.ts",
					"line": 11,
					"character": 27
				}
			]
		},
		{
			"id": 519,
			"name": "vecDistanceSq",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 520,
					"name": "vecDistanceSq",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the squared straight-line (i.e. Euclidean) distance between the two points",
						"tags": [
							{
								"tag": "see",
								"text": "{@link vecDistance}"
							},
							{
								"tag": "see",
								"text": "{@link vecGetLengthSq}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 521,
							"name": "u",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the first point"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 522,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the second point to which squared distance should be measured"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecDistanceSq.ts",
					"line": 11,
					"character": 29
				}
			]
		},
		{
			"id": 408,
			"name": "vecDot",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 409,
					"name": "vecDot",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the dot product of the two vectors, i.e. `u.x * v.x + u.y * v.y`.",
						"tags": [
							{
								"tag": "see",
								"text": "{@link vecCross}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 410,
							"name": "u",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the first vector"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 411,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the vector to dot with the first"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecDot.ts",
					"line": 10,
					"character": 22
				}
			]
		},
		{
			"id": 570,
			"name": "vecGetLength",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 571,
					"name": "vecGetLength",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the straight-line length (i.e. Euclidean norm) of the given vector.",
						"text": "Equivalent to `√(v.x² + v.y²)`.\n"
					},
					"parameters": [
						{
							"id": 572,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the vector whose length should be measured\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecGetLength.ts",
					"line": 10,
					"character": 28
				}
			]
		},
		{
			"id": 412,
			"name": "vecGetLengthSq",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 413,
					"name": "vecGetLengthSq",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the squared straight-line length (i.e. square of the Euclidean norm) of the given vector.",
						"text": "Equivalent to `v.x² + v.y²`.\n"
					},
					"parameters": [
						{
							"id": 414,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the vector whose squared length should be measured\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecGetLengthSq.ts",
					"line": 10,
					"character": 30
				}
			]
		},
		{
			"id": 573,
			"name": "vecGetManhattanLength",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 574,
					"name": "vecGetManhattanLength",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the Manhattan length of the given vector, i.e. `|v.x| + |v.y|`.",
						"tags": [
							{
								"tag": "see",
								"text": "{@link vecManhattanDistance}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 575,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the vector whose Manhattan length should be measured"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecGetManhattanLength.ts",
					"line": 9,
					"character": 37
				}
			]
		},
		{
			"id": 576,
			"name": "vecLerp",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 577,
					"name": "vecLerp",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Performs a linear interpolation between the two vectors. The `r` parameter is allowed to be outside `[0, 1]`."
					},
					"parameters": [
						{
							"id": 578,
							"name": "u",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the vector to start interpolation from"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 579,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the vector to end interpolation with"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 580,
							"name": "r",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the ratio to interpolate the two vectors, with _r_ = 0 returning the first vector `u` and _r_ = 1 returning\n the second vector `v`"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 581,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 10
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecLerp.ts",
					"line": 15,
					"character": 23
				}
			]
		},
		{
			"id": 582,
			"name": "vecManhattanDistance",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 583,
					"name": "vecManhattanDistance",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the Manhattan distance between the two points.",
						"text": "Equivalent to `|v.x - u.x| + |v.y - u.y|`.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link vecGetManhattanLength}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 584,
							"name": "u",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the first point"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 585,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the point to measure manhattan distance to from the first point"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecManhattanDistance.ts",
					"line": 12,
					"character": 36
				}
			]
		},
		{
			"id": 586,
			"name": "vecNormalize",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 587,
					"name": "vecNormalize",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Normalizes the vector to be length 1. If the given vector is the zero-vector, this method\nreturns `(NaN, NaN)`.",
						"tags": [
							{
								"tag": "see",
								"text": "{@link vecGetLength}"
							},
							{
								"tag": "see",
								"text": "{@link vecGetLengthSq}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 588,
							"name": "vec",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the vector to normalize"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 589,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 10
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecNormalize.ts",
					"line": 15,
					"character": 28
				}
			]
		},
		{
			"id": 590,
			"name": "vecOrigin",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 591,
					"name": "vecOrigin",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the 2d origin vector, `(0, 0)`.",
						"tags": [
							{
								"tag": "see",
								"text": "{@link vecReset}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 592,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 10
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecOrigin.ts",
					"line": 10,
					"character": 25
				}
			]
		},
		{
			"id": 593,
			"name": "vecPerp",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 594,
					"name": "vecPerp",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the perp of the given vector, as defined by `vecPerp(a, b) = (-b, a)`.\nThis is equivalent to a counter-clockwise rotation in the standard plane."
					},
					"parameters": [
						{
							"id": 595,
							"name": "vec",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the vector whose perp should be calculated"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 596,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 10
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecPerp.ts",
					"line": 12,
					"character": 23
				}
			]
		},
		{
			"id": 118,
			"name": "vecReset",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 119,
					"name": "vecReset",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Construct a new vector given an `x` and `y` value.",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IVec}"
							},
							{
								"tag": "see",
								"text": "{@link vecAlloc}"
							},
							{
								"tag": "see",
								"text": "{@link vecClone}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 120,
							"name": "x",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "x-coordinate of the vector"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 121,
							"name": "y",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "y-coordinate of the vector"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 122,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 10
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecReset.ts",
					"line": 13,
					"character": 24
				}
			]
		},
		{
			"id": 597,
			"name": "vecScale",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 598,
					"name": "vecScale",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Scales both coordinates of this vector by a given scalar.",
						"tags": [
							{
								"tag": "see",
								"text": "{@link vecAdd}"
							},
							{
								"tag": "see",
								"text": "{@link vecTransformBy}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 599,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the vector to scale"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 600,
							"name": "scalar",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the value by which the vector's components should be scaled"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 601,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 10
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecScale.ts",
					"line": 14,
					"character": 24
				}
			]
		},
		{
			"id": 602,
			"name": "vecSubtract",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 603,
					"name": "vecSubtract",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes `u - v`, i.e. subtracting the second vector from the first.",
						"tags": [
							{
								"tag": "see",
								"text": "{@link vecAdd}"
							},
							{
								"tag": "see",
								"text": "{@link vecScale}"
							},
							{
								"tag": "see",
								"text": "{@link vecTransformBy}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 604,
							"name": "u",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the first vector"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 605,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the second vector"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 606,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 10
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecSubtract.ts",
					"line": 15,
					"character": 27
				}
			]
		},
		{
			"id": 127,
			"name": "vecTransformBy",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 128,
					"name": "vecTransformBy",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Multiplies the vector by an affine matrix.",
						"text": "This computes a left multiplication of the vector by a matrix, i.e. _M_ × _v_.\n\nPer usual linear algebra rules, multiplying the vector `(x, y)` according to an affine matrix\n`[a b c d e f]` is defined by:\n\n```\n⎡a c e⎤ ⎛x⎞   ⎛ax + cy + e⎞\n⎢b d f⎥ ⎜y⎟ = ⎜bx + dy + f⎟\n⎣0 0 1⎦ ⎝1⎠   ⎝     1     ⎠\n```\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link Imat2d}"
							},
							{
								"tag": "see",
								"text": "{@link vecAdd}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 129,
							"name": "v",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the vector to transform"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							}
						},
						{
							"id": 130,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the matrix to multiply this vector by"
							},
							"type": {
								"type": "reference",
								"name": "IMat2d",
								"id": 28
							}
						},
						{
							"id": 131,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 10
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 10
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecTransformBy.ts",
					"line": 25,
					"character": 30
				}
			]
		}
	],
	"groups": [
		{
			"title": "Enumerations",
			"kind": 4,
			"children": [
				6,
				1
			]
		},
		{
			"title": "Interfaces",
			"kind": 256,
			"children": [
				35,
				23,
				28,
				46,
				40,
				18,
				13,
				10
			]
		},
		{
			"title": "Type aliases",
			"kind": 4194304,
			"children": [
				51,
				52
			]
		},
		{
			"title": "Functions",
			"kind": 64,
			"children": [
				53,
				62,
				76,
				80,
				85,
				90,
				94,
				98,
				66,
				103,
				108,
				55,
				111,
				139,
				144,
				71,
				150,
				159,
				163,
				167,
				193,
				228,
				232,
				218,
				251,
				246,
				256,
				152,
				261,
				266,
				271,
				172,
				275,
				279,
				282,
				286,
				291,
				294,
				298,
				301,
				304,
				174,
				309,
				314,
				319,
				237,
				325,
				239,
				183,
				329,
				185,
				333,
				335,
				339,
				343,
				360,
				363,
				373,
				368,
				377,
				391,
				400,
				425,
				430,
				132,
				346,
				435,
				123,
				439,
				357,
				198,
				443,
				446,
				210,
				353,
				451,
				455,
				460,
				464,
				468,
				350,
				420,
				134,
				472,
				478,
				487,
				491,
				495,
				500,
				505,
				509,
				381,
				514,
				523,
				480,
				528,
				201,
				533,
				537,
				215,
				541,
				544,
				223,
				549,
				386,
				395,
				415,
				203,
				553,
				557,
				116,
				562,
				404,
				566,
				519,
				408,
				570,
				412,
				573,
				576,
				582,
				586,
				590,
				593,
				118,
				597,
				602,
				127
			]
		}
	]
}